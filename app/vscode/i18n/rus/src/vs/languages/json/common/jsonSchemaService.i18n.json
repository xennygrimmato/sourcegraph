/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"app.plugin.json.activationEvents": "События активации для подключаемого модуля",
	"app.plugin.json.contributes": "Предоставляемые дополнения этого подключаемого модуля",
	"app.plugin.json.contributes.language": "Предоставляемые дополнения языка подключаемого модуля",
	"app.plugin.json.contributes.language.aliases": "Псевдонимы имен для этого языка",
	"app.plugin.json.contributes.language.extensions": "Расширения файлов, связанные с этим языком",
	"app.plugin.json.contributes.language.filenames": "Имена файлов, связанные с этим языком",
	"app.plugin.json.contributes.language.id": "Идентификатор этого языка",
	"app.plugin.json.dependencies": "Зависимости подключаемого модуля",
	"app.plugin.json.mainModule": "Относительный путь к основному файлу JavaScript",
	"app.plugin.json.pluginId": "Уникальный идентификатор подключаемого модуля",
	"app.plugin.json.scripts": "Скрипты, предложенные подключаемым модулем",
	"app.plugin.json.scripts.compile": "Командная строка для компиляции этого подключаемого модуля",
	"bower.json.authors": "Список людей, которые являются создателями содержимого пакета.",
	"bower.json.dependencies": "Зависимости задаются с помощью простой хэш-функции имени пакета к идентификатору, совместимому с модулем semver, или к URL-адресу.",
	"bower.json.description": "Помогите пользователям найти ваш пакет, указав краткое описание.",
	"bower.json.devDependencies": "Зависимости, необходимые только для разработки пакета, например, среда тестирования, или для сборки документации. ",
	"bower.json.exportsOverride": "Используется модулем grunt-bower-task для задания пользовательского расположения установки.",
	"bower.json.homepage": "URL-адрес дополнительных сведений о пакете. Если адрес не указан и используется конечная точка GitHub, происходит откат к проекту GitHub. ",
	"bower.json.ignore": "Список файлов, которые следует игнорировать в Bower при установке пакета.",
	"bower.json.invalidPatternName": "Допустимым является любое свойство, начинающееся с \"_\".",
	"bower.json.keywords": "Используется для поиска по ключевому слову. Упрощает поиск вашего пакета и не требует знания имени пакета.",
	"bower.json.license": "Идентификатор лицензии SPDX или URL-адрес или путь к лицензии.",
	"bower.json.main": "Основные файлы, необходимые для использования пакета.",
	"bower.json.moduleType": "Типы модулей, включенных в пакет",
	"bower.json.packagename": "Имя пакета.",
	"bower.json.private": "Если в качестве значения будет задано \"true\", то в публикации будет отказано. Это способ предотвратить случайную публикацию частного репозитория.",
	"bower.json.repository": "Репозиторий, в котором может быть найден исходный код.",
	"bower.json.resolutions": "Версии зависимостей для автоматического разрешения при конфликтах между пакетами.",
	"bower.json.title": "JSON-схема для файлов конфигурации Bower",
	"bower.json.version": "Номер семантической версии.",
	"global.json.projects": "Список папок проекта, относящихся к этому файлу.",
	"global.json.sources": "Список исходных папок, относящихся к этому файлу.",
	"global.json.title": "Схема JSON для файлов глобальной конфигурации ASP.NET",
	"jsconfig.json.compilerOptions": "Указывает языковой службе JavaScript, как проверять JS-файлы.",
	"jsconfig.json.compilerOptions.charset": "Набор символов для входных файлов",
	"jsconfig.json.compilerOptions.decorators": "Включает экспериментальную поддержку для декораторов ES7.",
	"jsconfig.json.compilerOptions.diagnostics": "Отображение сведений диагностики",
	"jsconfig.json.compilerOptions.locale": "Языковой стандарт, используемый для отображения сообщений об ошибках, например, ru-ru.",
	"jsconfig.json.compilerOptions.mapRoot": "Указывает расположение, в котором отладчик должен искать файлы карты вместо созданных расположений.",
	"jsconfig.json.compilerOptions.module": "Создание кода модуля, разрешаемого в \"commonjs\", \"amd\", \"system\" или \"umd\".",
	"jsconfig.json.compilerOptions.noLib": "Не включать файл библиотеки по умолчанию (lib.d.ts)",
	"jsconfig.json.compilerOptions.target": "Указание целевой версии ECMAScript: \"ES3\" (по умолчанию), \"ES5\" или \"ES6\" (экспериментальная).",
	"jsconfig.json.exclude": "Перечисление файлов и папок, которые не следует включать. Это свойство не учитывается, если свойство \"files\" отсутствует.",
	"jsconfig.json.files": "Если свойство \"files\" отсутствует в файле jsconfig.json, языковая служба по умолчанию включает все файлы с каталогом и подкаталогами. Если указано свойство \"files\", включаются только эти файлы.",
	"jsconfig.json.title": "Схема JSON для файла конфигурации JavaScript",
	"json.schema.unabletoload": "Не удается загрузить схему из \"{0}\": {1}.",
	"package.json.bugs": "URL-адрес средства отслеживания проблем проекта или адрес электронной почты, на который нужно сообщать о проблемах. Это полезно для людей, у которых возникают проблемы с пакетом.",
	"package.json.bugs.email": "Адрес электронной почты, на который будут отправлены сообщения о проблемах.",
	"package.json.bugs.url": "URL-адрес средства отслеживания проблем проектов.",
	"package.json.bundleDependencies": "Массив имен пакетов, которые будут объединены при публикации пакета.",
	"package.json.bundledDependencies": "Массив имен пакетов, которые будут объединены при публикации пакета.",
	"package.json.config": "Хэш \"config\" можно использовать, чтобы задать параметры конфигурации в скриптах пакета, которые сохраняются после любых обновлений.",
	"package.json.contributors": "Список составителей этого пакета.",
	"package.json.dependency": "Зависимости указываются с простым хэшем имени пакета в диапазоне версии. Диапазон версии является строкой с одним или несколькими дескрипторами с разделителями-пробелами. Зависимости можно также определить с помощью архива tar или URL-адреса GIT.",
	"package.json.descr": "Это поможет людям найти ваш пакет, так как он отображается в \"поиске NPM\".",
	"package.json.description": "Конфигурация NPM этого пакета.",
	"package.json.directories.bin": "Если вы укажете каталог \"bin\", то все файлы в этой папке будут использоваться как хэш \"bin\".",
	"package.json.directories.doc": "Поместите сюда файлы Markdown. Вполне возможно, что когда-нибудь они будут отображаться красиво.",
	"package.json.directories.example": "Поместите сюда примеры скриптов. Вполне возможно, что когда-нибудь их удастся толково использовать.",
	"package.json.directories.lib": "Сообщите людям, где находится основная часть вашей библиотеки. С папкой библиотеки ничего особенного никто не делает, но эти метаданные могут быть полезны.",
	"package.json.directories.man": "Папка со страницами руководства. Добавьте \"сахар\", чтобы создать массив \"man\", перейдя в папку.",
	"package.json.files": "Поле \"файлы\" является массивом файлов, включаемых в проект. Если папка названа в массиве, он также будет включать файлы из этой папки.",
	"package.json.homepage": "URL-адрес домашней страницы проекта.",
	"package.json.keywords": "Это поможет людям найти ваш пакет, так как он отображается в \"поиске NPM\".",
	"package.json.license": "Следует указать лицензию для пакета, чтобы люди знали, что им разрешено использовать его (с учетом применимых ограничений, если они есть).",
	"package.json.licenses": "Следует указать лицензию для пакета, чтобы люди знали, что им разрешено использовать его (с учетом применимых ограничений, если они есть).",
	"package.json.main": "Основное поле — это идентификатор модуля, который является первой точкой входа в программу.",
	"package.json.maintainers": "Список людей, обслуживающих пакет.",
	"package.json.man": "Укажите один файл или массив имен файлов для поиска программой man.",
	"package.json.name": "Имя пакета.",
	"package.json.person": "Человек, вовлеченный в создание или обслуживание этого пакета",
	"package.json.preferGlobal": "Если пакет в первую очередь является приложением командной строки, которое следует установить глобально, задайте для него значение \"true\", чтобы отправить предупреждение, если оно установлено локально.",
	"package.json.private": "Если задано значение \"true\", NPM откажется публиковать его",
	"package.json.repository": "Укажите место хранения кода этого пакета. Это будет полезно для других составителей.",
	"package.json.scripts": "Элемент \"Скрипты\" является хэшем объекта команд скрипта, которые запускаются несколько раз в жизненном цикле пакета. Ключ — это событие жизненного цикла, а значение — команда, выполняемая в этой точке.",
	"package.json.underscore": "Допустимым является любое свойство, начинающееся с \"_\".",
	"package.json.version": "Версия должна быть доступна для анализа node-semver (входит в пакет NPM как зависимость).",
	"project.json.authors": "Автор приложения",
	"project.json.bundleExclude": "Список файлов, исключаемых из выходных данных публикации (пакет kpm).",
	"project.json.code": "Стандартная маска, используемая для указания всех файлов кода. которые необходимо скомпилировать (тип данных: строка или массив со стандартными масками). Пример: [ 'Folder1*.cs', 'Folder2*.cs' ]",
	"project.json.commands": "Доступные для этого приложения команды",
	"project.json.compilationOptions": "Параметры компиляции, которые передаются в Roslyn",
	"project.json.configurations": "Конфигурации — это именованные группы параметров компиляции. Существует два значения по умолчанию, встроенные в среду выполнения, — \"Отладка\" и \"Выпуск\".",
	"project.json.dependencies": "Зависимости приложения. В каждой записи указывается имя и версия пакета Nuget.",
	"project.json.dependency.name": "Версия зависимости.",
	"project.json.dependency.type": "Тип зависимости. Зависимости \"build\" существуют только во время сборки",
	"project.json.description": "Описание приложения",
	"project.json.exclude": "Стандартная маска, используемая для указания всех файлов кода, которые необходимо исключить из компиляции (тип данных: строка или массив со стандартными масками).",
	"project.json.frameworks": "Целевые платформы, которые будут созданы, и зависимости, связанные с конфигурацией.",
	"project.json.preprocess": "Стандартная маска, используемая для указания всех файлов кода, для которых необходимо выполнить предварительную обработку (тип данных: строка со стандартной маской).",
	"project.json.resources": "Стандартная маска, используемая для указания всех файлов, которые необходимо скомпилировать в качестве ресурсов.",
	"project.json.script": "Скрипт или скрипты командной строки.\r\rДоступные переменные:\r%project:Directory% - каталог проекта\r%project:Name% - название проекта\r%project:Version% - версия проекта",
	"project.json.scripts": "Скрипты для выполнения на различных этапах.",
	"project.json.shared": "Стандартная маска, используемая для указания файлов кода, которые необходимо использовать для зависимых проектов. Пример: [ 'Folder1*.cs', 'Folder2*.cs' ]",
	"project.json.title": "JSON-схема для файлов project.json ASP.NET",
	"project.json.version": "Версия приложения. Пример: 1.2.0.0",
	"project.json.webroot": "Свойство Webroot в файле project.json определяет корень веб-сервера (также называемый общедоступной папкой). В Visual Studio эта папка будет использоваться для создания корня IIS. Статические файлы следует разместить здесь.",
	"schema.json": "Описывает JSON-файл с использованием схемы. Дополнительные сведения см. на веб-сайте json-schema.org.",
	"schema.json.$schema": "Схема, с использованием которой будет проверяться этот документ",
	"schema.json.additionalItems": "Для массивов, только когда элементы заданы в виде массива. Если это схема, эта схема проверяет элементы после тех, которые заданы массивом элементов. Если значение false, дополнительные элементы вызывают сбой проверки.",
	"schema.json.additionalProperties": "Схема или логическое значение. Если это схема, она используется для проверки всех свойств, не сопоставленных с параметром \"properties\" или \"patternProperties\". Если значение false, любые свойства, не сопоставленные ни с одним из этих параметров, вызывают сбой схемы.",
	"schema.json.allOf": "Массив схем, все из которых должны соответствовать.",
	"schema.json.anyOf": "Массив схем, хотя бы одна из которых должна соответствовать.",
	"schema.json.default": "Значение по умолчанию. Используется предложениями.",
	"schema.json.definitions": "Не используется для проверки. Поместите сюда вложенные схемы, на которые требуется ссылаться в строке с помощью $ref",
	"schema.json.dependencies": "Сопоставление имен свойств массиву имен свойств или схеме. Массив имен свойств означает, что допустимость свойства, именованного в ключе, зависит от свойств массива, присутствующих в объекте. Если значение - схема, эта схема применима к объекту только в том случае, если свойство ключа существует в объекте.",
	"schema.json.description": "Длинное описание элемента. Используется в меню наведения и предложениях.",
	"schema.json.enum": "Набор допустимых значений литерала",
	"schema.json.exclusiveMaximum": "Делает максимальное свойство эксклюзивным.",
	"schema.json.exclusiveMininum": "Делает минимальное свойство эксклюзивным.",
	"schema.json.id": "Уникальный идентификатор для схемы.",
	"schema.json.items": "Для массивов. Может являться схемой, относительно которой проверяется каждый элемент, или массивом схем, относительно которого проверяется каждый элемент по порядку (первая схема проверяет первый элемент, вторая схема проверяет второй элемент и так далее).",
	"schema.json.maxItems": "Максимальное число элементов, которые могут находиться внутри массива. Включительно.",
	"schema.json.maxLength": "Максимальная длина строки.",
	"schema.json.maxProperties": "Максимальное число свойств, которыми может обладать объект. Включительно.",
	"schema.json.maximum": "Максимальное числовое значение, включенное по умолчанию.",
	"schema.json.minItems": "Минимальное число элементов, которые могут находиться внутри массива. Включительно.",
	"schema.json.minLength": "Минимальная длина строки.",
	"schema.json.minProperties": "Минимальное число свойств, которыми может обладать объект. Включительно.",
	"schema.json.minimum": "Минимальное числовое значение, включенное по умолчанию.",
	"schema.json.multipleOf": "Число, которое должно разделять текущее значение без остатка",
	"schema.json.not": "Схема, которая не должна соответствовать.",
	"schema.json.oneOf": "Массив схем, из которых должна соответствовать только одна.",
	"schema.json.pattern": "Регулярное выражение, относительно которого сопоставляется строка. Оно не является неявно прикрепленным.",
	"schema.json.patternProperties": "Сопоставление регулярных выражений в именах свойств схемам для соответствующих свойств.",
	"schema.json.properties": "Сопоставление имен свойств схемам для каждого свойства.",
	"schema.json.required": "Массив строк, перечисляющий имена всех свойств, необходимых в этом объекте.",
	"schema.json.title": "Описательное название элемента.",
	"schema.json.type": "Строка одного из базовых типов схем (число, целое число, значение null, массив, объект, логическое значение, строка) или массив строк, задающий подмножество тех типов.",
	"schema.json.uniqueItems": "Если все элементы массива должны быть уникальными. По умолчанию имеет значение false.",
	"snippetSchema.json": "Настройка фрагмента пользователя",
	"snippetSchema.json.body": "Содержимое фрагмента. Используйте \"${id}\", \"${id:label}\" и \"${1:label}\" для переменных и \"$0\" и \"$1\" для позиций курсора.",
	"snippetSchema.json.description": "Описание фрагмента",
	"snippetSchema.json.prefix": "Префикс, используемый при выборе фрагмента в Intellisense.",
	"tsconfig.json.compilerOptions": "Сообщает компилятору TypeScript, как следует компилировать TS-файлы",
	"tsconfig.json.compilerOptions.charset": "Набор символов для входных файлов",
	"tsconfig.json.compilerOptions.declaration": "Создает соответствующие D.TS-файлы.",
	"tsconfig.json.compilerOptions.diagnostics": "Отображение сведений диагностики",
	"tsconfig.json.compilerOptions.emitBOM": "Выдача метки порядка байтов UTF-8 (BOM) в начале выходных файлов.",
	"tsconfig.json.compilerOptions.inlineSourceMap": "Выдача одного файла с исходными сопоставлениями вместо отдельного файла.",
	"tsconfig.json.compilerOptions.inlineSources": "Выдача источника с sourcemap в одном файле; требуется задать --inlineSourceMap.",
	"tsconfig.json.compilerOptions.listFiles": "Печать имен файлов в рамках компиляции",
	"tsconfig.json.compilerOptions.locale": "Языковой стандарт, используемый для отображения сообщений об ошибках, например, ru-ru.",
	"tsconfig.json.compilerOptions.mapRoot": "Указывает расположение, в котором отладчик должен искать файлы карты вместо созданных расположений",
	"tsconfig.json.compilerOptions.module": "Указание создания кода модуля: \"CommonJS\", \"Amd\", \"System\" или \"UMD\"",
	"tsconfig.json.compilerOptions.newLine": "Указывает последовательность конца строки, используемую при порождении файлов: \"CRLF\" (DOS) или \"LF\" (UNIX).",
	"tsconfig.json.compilerOptions.noEmit": "Не создавать выходные данные.",
	"tsconfig.json.compilerOptions.noEmitHelpers": "Не создавать пользовательские функции вспомогательного приложения, такие как __extends, в скомпилированных выходных данных",
	"tsconfig.json.compilerOptions.noEmitOnError": "Не создавать выходные данные при обнаружении ошибок по проверке типа \"any\".",
	"tsconfig.json.compilerOptions.noImplicitAny": "Предупреждать о выражениях и объявлениях, имеющих неявный тип \"any\".",
	"tsconfig.json.compilerOptions.noLib": "Не включать файл библиотеки по умолчанию (lib.d.ts)",
	"tsconfig.json.compilerOptions.out": "Сцепить и вывести выходные данные в одном файле.",
	"tsconfig.json.compilerOptions.outDir": "Перенаправить структуру выходных данных в каталог.",
	"tsconfig.json.compilerOptions.preserveConstEnums": "Не удалять объявления перечислений констант из созданного кода.",
	"tsconfig.json.compilerOptions.removeComments": "Не создавать комментарии в выходных данных.",
	"tsconfig.json.compilerOptions.rootDir": "Задает корневой каталог исходных файлов. Используйте для управления структурой выходного каталога с --outDir.",
	"tsconfig.json.compilerOptions.sourceMap": "Создает соответствующий MAP-файл.",
	"tsconfig.json.compilerOptions.sourceRoot": "Указывает расположение, в котором отладчик должен искать файлы TypeScript вместо исходных расположений.",
	"tsconfig.json.compilerOptions.suppressImplicitAnyIndexErrors": "Подавлять ошибки noImplicitAny для объектов индексирования с отсутствующими сигнатурами индекса.",
	"tsconfig.json.compilerOptions.target": "Указать целевую версию ECMAScript: \"ES3\" (по умолчанию), \"ES5\" или \"ES6\" (экспериментальная).",
	"tsconfig.json.files": "Если свойство \"files\" отсутствует в tsconfig.json, компилятор по умолчанию включает все файлы в содержащем каталоге и подкаталогах. Когда свойство \"files\" указано, включаются только эти файлы.",
	"tsconfig.json.title": "Схема JSON для файла конфигурации компилятора TypeScript"
}