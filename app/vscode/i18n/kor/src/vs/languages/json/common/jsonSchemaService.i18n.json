/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"app.plugin.json.activationEvents": "플러그 인에 대한 활성화 이벤트",
	"app.plugin.json.contributes": "이 플러그 인의 참여",
	"app.plugin.json.contributes.language": "플러그 인의 언어 참여",
	"app.plugin.json.contributes.language.aliases": "이 언어에 대한 이름 별칭",
	"app.plugin.json.contributes.language.extensions": "이 언어와 관련된 파일 확장명",
	"app.plugin.json.contributes.language.filenames": "이 언어와 관련된 파일 이름",
	"app.plugin.json.contributes.language.id": "이 언어의 ID",
	"app.plugin.json.dependencies": "플러그 인 종속성",
	"app.plugin.json.mainModule": "주 JavaScript 파일의 상대 경로",
	"app.plugin.json.pluginId": "고유 플러그 인 ID",
	"app.plugin.json.scripts": "플러그 인에서 제공된 스크립트",
	"app.plugin.json.scripts.compile": "이 플러그 인을 컴파일할 명령줄",
	"bower.json.authors": "패키지의 내용을 승인한 사람의 목록입니다.",
	"bower.json.dependencies": "종속성은 semver 호환 식별자 또는 URL에 대한 패키지 이름의 간단한 해시를 통해 지정됩니다.",
	"bower.json.description": "사용자가 간략한 설명으로 패키지를 식별 및 검색하도록 도와줍니다.",
	"bower.json.devDependencies": "패키지 개발(예: 프레임워크 테스트 또는 설명서 작성)에만 필요한 종속성입니다.",
	"bower.json.exportsOverride": "grunt-bower-task에서 사용자 지정 설치 위치를 지정하는 데 사용됩니다.",
	"bower.json.homepage": "패키지에 대한 자세한 정보를 제공하는 URL입니다. 지정하지 않은 경우 GitHub 끝점인 GitHub 프로젝트로 대체합니다.",
	"bower.json.ignore": "패키지를 설치할 때 Bower에서 무시할 파일 목록입니다.",
	"bower.json.invalidPatternName": "_로 시작하는 속성은 유효합니다.",
	"bower.json.keywords": "키워드로 검색하는 데 사용됩니다. 이름을 모르더라도 패키지를 쉽게 검색할 수 있도록 만들어줍니다.",
	"bower.json.license": "SPDS 라이선스 ID 또는 라이선스 경로/url입니다.",
	"bower.json.main": "패키지를 사용하는 데 필요한 주 작동 파일입니다.",
	"bower.json.moduleType": "이 패키지가 표시되는 모듈의 유형",
	"bower.json.packagename": "패키지의 이름입니다.",
	"bower.json.private": "true로 설정한 경우 게시가 거부됩니다. 그러면 사설 리포지토리를 실수로 게시하는 것을 방지할 수 있습니다.",
	"bower.json.repository": "소스 코드를 찾을 수 있는 리포지토리입니다.",
	"bower.json.resolutions": "패키지 간에 충돌이 발생하는 경우에 자동으로 해결할 종속성 버전입니다.",
	"bower.json.title": "Bower 구성 파일의 JSON 스키마",
	"bower.json.version": "의미 체계 버전 번호입니다.",
	"global.json.projects": "이 파일에 상대적인 프로젝트 폴더의 목록입니다.",
	"global.json.sources": "이 파일에 상대적인 소스 폴더의 목록입니다.",
	"global.json.title": "ASP.NET 글로벌 구성 파일용 JSON 스키마",
	"jsconfig.json.compilerOptions": "JavaScript 언어 서비스에 .js 파일의 유효성을 검사하는 방법을 지시합니다.",
	"jsconfig.json.compilerOptions.charset": "입력 파일의 문자 집합",
	"jsconfig.json.compilerOptions.decorators": "ES7 데코레이터에 대해 실험적 지원을 사용합니다.",
	"jsconfig.json.compilerOptions.diagnostics": "진단 정보를 표시합니다.",
	"jsconfig.json.compilerOptions.locale": "오류 메시지를 표시하는 데 사용할 로캘(예: en-us)입니다.",
	"jsconfig.json.compilerOptions.mapRoot": "디버거가 생성된 위치 대신 맵 파일을 찾아야 하는 위치를 지정합니다.",
	"jsconfig.json.compilerOptions.module": "확인할 모듈 코드 생성: 'commonjs', 'amd', 'system' 및 'umd'.",
	"jsconfig.json.compilerOptions.noLib": "기본 라이브러리 파일(lib.d.ts)을 포함하지 않습니다.",
	"jsconfig.json.compilerOptions.target": "ECMAScript 대상 버전 지정: 'ES3'(기본값), 'ES5' 또는 'ES6'(실험적).",
	"jsconfig.json.exclude": "포함되지 않아야 하는 파일과 폴더를 나열합니다. 이 속성은 'files' 속성이 있는 경우 적용되지 않습니다.",
	"jsconfig.json.files": "'files' 속성이 jsconfig.json에 없는 경우 언어 서비스는 디렉터리 및 하위 디렉터리를 비롯한 모든 파일을 기본적으로 포함합니다. 'files' 속성이 지정된 경우에는 해당 파일만 포함됩니다.",
	"jsconfig.json.title": "JavaScript 구성 파일에 대한 JSON 스키마",
	"json.schema.unabletoload": "'{0}'에서 스키마를 로드할 수 없습니다. {1}.",
	"package.json.bugs": "문제를 보고할 프로젝트 문제 추적기의 URL 및/또는 메일 주소입니다. 이는 패키지에서 문제를 경험하는 사람들에게 유용합니다.",
	"package.json.bugs.email": "문제를 보고할 메일 주소입니다.",
	"package.json.bugs.url": "프로젝트 문제 추적기의 URL입니다.",
	"package.json.bundleDependencies": "패키지를 게시할 때 포함될 패키지 이름의 배열입니다.",
	"package.json.bundledDependencies": "패키지를 게시할 때 포함될 패키지 이름의 배열입니다.",
	"package.json.config": "'config' 해시를 사용하여 업그레이드 간에 유지되는, 패키지 스크립트에서 사용되는 구성 매개 변수를 설정할 수 있습니다.",
	"package.json.contributors": "이 패키지에 참가한 사람들의 목록입니다.",
	"package.json.dependency": "종속성은 버전 범위에 대한 패키지 이름의 간단한 해시를 통해 지정됩니다. 버전 범위는 공백으로 구분된 설명자가 하나 이상 있는 문자열입니다. 종속성은 tarball 또는 git URL로 식별될 수도 있습니다.",
	"package.json.descr": "패키지가 'npm search'에 나열되므로 패키지를 검색하는 데 도움이 됩니다.",
	"package.json.description": "이 패키지의 NPM 구성입니다.",
	"package.json.directories.bin": "'bin' 디렉터리를 지정하면 해당 폴더의 모든 파일이 'bin' 해시로 사용됩니다.",
	"package.json.directories.doc": "여기에 마크다운 파일을 배치하세요. 결국 해당 파일은 언젠가 멋지게 표시될 것입니다.",
	"package.json.directories.example": "여기에 예제 스크립트를 배치하세요. 해당 스크립트는 언젠가 현명한 방법으로 노출될 수도 있습니다.",
	"package.json.directories.lib": "대부분의 라이브러리가 있는 위치를 사람들에게 알리세요. lib 폴더에 특별한 작업은 전혀 수행되지 않지만 유용한 메타 정보입니다.",
	"package.json.directories.man": "기본 페이지로 가득 찬 폴더입니다. 신택틱 슈거(syntactic sugar)를 통해 이 폴더를 검색하여 'man' 배열을 생성할 수 있습니다.",
	"package.json.files": "'files' 필드는 프로젝트에 포함할 파일의 배열입니다. 배열에서 폴더 이름을 지정하면 해당 폴더의 파일도 포함됩니다.",
	"package.json.homepage": "프로젝트 홈 페이지의 URL입니다.",
	"package.json.keywords": "패키지가 'npm search'에 나열되므로 패키지를 검색하는 데 도움이 됩니다.",
	"package.json.license": "사용할 수 있는 방법과 적용된 제한 사항을 알 수 있도록 패키지의 라이선스를 지정해야 합니다.",
	"package.json.licenses": "사용할 수 있는 방법과 적용된 제한 사항을 알 수 있도록 패키지의 라이선스를 지정해야 합니다.",
	"package.json.main": "주 필드는 프로그램에 대한 주 진입점인 모듈 ID입니다.",
	"package.json.maintainers": "이 패키지를 유지 관리하는 사용자의 목록입니다.",
	"package.json.man": "man 프로그램에서 찾도록 배치할 단일 파일이나 파일 이름의 배열을 지정합니다.",
	"package.json.name": "패키지의 이름입니다.",
	"package.json.person": "이 패키지를 만들거나 유지 관리하는 데 관련된 사용자입니다.",
	"package.json.preferGlobal": "패키지가 전역으로 설치되어야 하는 명령줄 응용 프로그램인 경우 이 값을 true로 설정하여 로컬로 설치된 경우 경고를 제공하세요.",
	"package.json.private": "true로 설정되면 npm이 게시하지 않습니다.",
	"package.json.repository": "코드가 있는 위치를 지정합니다. 이는 참여하려는 사람들에게 유용합니다.",
	"package.json.scripts": "'scripts' 멤버는 패키지 수명 주기에서 다양한 시점에 실행되는 스크립트 명령의 개체 해시입니다. 키는 수명 주기 이벤트이고 값은 해당 시점에 실행할 명령입니다.",
	"package.json.underscore": "_로 시작하는 속성은 유효합니다.",
	"package.json.version": "버전은 node-semver을 통해 구문 분석될 수 있어야 합니다. node-semver은 npm과 함께 종속성으로 포함되어 있습니다.",
	"project.json.authors": "응용 프로그램의 작성자",
	"project.json.bundleExclude": "게시 출력에서 제외할 파일의 목록입니다(kpm bundle).",
	"project.json.code": "컴파일해야 하는 모든 코드 파일을 지정하는 GLOB 패턴입니다(데이터 형식: GLOB 패턴을 포함하는 문자열 또는 배열). 예: [ 'Folder1*.cs', 'Folder2*.cs' ]",
	"project.json.commands": "이 응용 프로그램에서 사용할 수 있는 명령",
	"project.json.compilationOptions": "Roslyn에게 전달된 컴파일 옵션",
	"project.json.configurations": "구성은 컴파일 설정의 명명된 그룹입니다. 런타임에 기본 제공된 두 가지 기본 구성으로 '디버그'와 '릴리스'가 있습니다.",
	"project.json.dependencies": "응용 프로그램의 종속성. 각 항목에서는 이름과 Nuget 패키지의 버전을 지정합니다.",
	"project.json.dependency.name": "종속성의 버전.",
	"project.json.dependency.type": "종속성의 유형. 'build' 종속성은 빌드 시에만 존재합니다.",
	"project.json.description": "응용 프로그램 설명",
	"project.json.exclude": "컴파일에서 제외할 모든 코드 파일을 나타내는 전역 패턴입니다(데이터 형식: GLOB 패턴을 포함하는 문자열 또는 배열).",
	"project.json.frameworks": "작성할 대상 프레임워크 및 구성에 따른 종속성",
	"project.json.preprocess": "전처리할 모든 코드 파일을 나타내는 전역 패턴입니다(데이터 형식: GLOB 패턴을 포함하는 문자열).",
	"project.json.resources": "리소스로 컴파일할 모든 파일을 나타내는 GLOB 패턴입니다.",
	"project.json.script": "명령줄 스크립트입니다.\r\r사용 가능한 변수:\r%project:Directory% - 프로젝트 디렉터리\r%project:Name% - 프로젝트 이름\r%project:Version% - 프로젝트 버전",
	"project.json.scripts": "다양한 단계 중에 제외할 스크립트입니다.",
	"project.json.shared": "종속 스크립트와 공유할 코드 파일을 지정하는 GLOB 패턴입니다. 예: [ 'Folder1*.cs', 'Folder2*.cs' ]",
	"project.json.title": "ASP.NET project.json 파일에 대한 JSON 스키마",
	"project.json.version": "응용 프로그램의 버전입니다. 예: 1.2.0.0",
	"project.json.webroot": "project.json 파일에서 웹 루트 속성을 지정하여 웹 서버 루트(공용 폴더라고도 함)를 지정합니다. Visual Studio에서 이 폴더는 IIS 루트를 지정하는 데 사용됩니다. 여기에 정적 파일을 넣어야 합니다.",
	"schema.json": "스키마를 사용하는 JSON 파일을 설명합니다. 자세한 내용은 json-schema.org를 참조하십시오.",
	"schema.json.$schema": "이 문서를 확인할 비교 대상 스키마 ",
	"schema.json.additionalItems": "항목이 배열로 설정된 경우의 배열에만 사용됩니다. 해당 배열이 스키마인 경우 항목 배열에서 항목을 지정한 후 이 스키마에서 항목의 유효성을 검사합니다. false인 경우 추가 항목의 유효성 검사가 실패합니다.",
	"schema.json.additionalProperties": "스키마 또는 부울입니다. 스키마의 경우 'properties' 또는 'patternProperties'와 일치하지 않는 모든 속성의 유효성을 검사하는 데 사용됩니다. false인 경우 둘 중 하나와 일치하지 않는 모든 속성으로 인해 이 스키마가 실패합니다.",
	"schema.json.allOf": "모든 스키마가 일치해야 하는 스키마 배열입니다.",
	"schema.json.anyOf": "최소한 하나의 스키마가 일치해야 하는 스키마 배열입니다.",
	"schema.json.default": "기본값입니다. 제안에서 사용됩니다.",
	"schema.json.definitions": "유효성 검사에 사용되지 않습니다. $ref가 포함된 인라인을 참조하려는 하위 스키마를 여기에 배치합니다.",
	"schema.json.dependencies": "속성 이름 배열 또는 스키마에 대한 속성 이름 맵입니다. 속성 이름 배열은 키에 이름이 지정된 속성의 유효성이 개체에 있는 배열의 속성에 따라 결정된다는 것을 의미합니다. 값이 스키마인 경우 키의 속성이 개체에 존재해야 스키마가 개체에 적용됩니다.",
	"schema.json.description": "요소의 자세한 설명입니다. 가리킨 항목 메뉴 및 제안에 사용됩니다.",
	"schema.json.enum": "유효한 리터럴 값 집합",
	"schema.json.exclusiveMaximum": "최대 속성을 배타적으로 설정합니다.",
	"schema.json.exclusiveMininum": "최소 속성을 배타적으로 설정합니다.",
	"schema.json.id": "스키마의 고유한 식별자입니다.",
	"schema.json.items": "배열에 사용됩니다. 순서(첫 번째 스키마에서 첫 번째 요소의 유효성을 검사하고 두 번째 스키마에서 두 번째 요소의 유효성을 검사하는 형식)대로 모든 요소의 유효성을 검사할 스키마이거나 각 아이템의 유효성을 검사할 스키마 배열일 수 있습니다.",
	"schema.json.maxItems": "배열 내에 있을 수 있는 최대 항목 수입니다. 포괄적입니다.",
	"schema.json.maxLength": "문자열의 최대 길이입니다.",
	"schema.json.maxProperties": "개체가 가질 수 있는 최대 속성 수입니다. 포괄적입니다.",
	"schema.json.maximum": "최대 숫자 값입니다. 기본적으로 포괄적입니다.",
	"schema.json.minItems": "배열 내에 배치할 수 있는 최소 항목 수입니다. 포괄적입니다.",
	"schema.json.minLength": "문자열의 최소 길이입니다.",
	"schema.json.minProperties": "개체가 가질 수 있는 최소 속성 수입니다. 포괄적입니다.",
	"schema.json.minimum": "최소 숫자 값입니다. 기본적으로 포괄적입니다.",
	"schema.json.multipleOf": "현재 값을 정확하게 나누어야 하는 숫자(예: 나머지 없음)입니다.",
	"schema.json.not": "일치하지 않아야 하는 스키마입니다.",
	"schema.json.oneOf": "스키마 배열로, 이러한 스키마 중 하나가 정확하게 일치해야 합니다.",
	"schema.json.pattern": "문자열과 일치하는 정규식입니다. 암시적으로 앵커가 지정되지 않습니다.",
	"schema.json.patternProperties": "속성 일치를 위한 스키마에 대한 속성 이름의 정규식 맵입니다.",
	"schema.json.properties": "각 속성의 스키마에 대한 속성 이름 맵입니다.",
	"schema.json.required": "이 개체에 필요한 모든 속성의 이름을 나열하는 문자열 배열입니다.",
	"schema.json.title": "요소에 대한 설명이 포함된 제목입니다.",
	"schema.json.type": "기본 스키마 유형(숫자, 정수, Null, 배열, 개체, 부울, 문자열) 중 하나의 문자열 또는 해당 유형의 하위 집합을 지정하는 문자열 배열입니다.",
	"schema.json.uniqueItems": "배열의 모든 항목이 고유해야 하는지의 여부입니다. 기본값은 false입니다.",
	"snippetSchema.json": "사용자 코드 조각 구성",
	"snippetSchema.json.body": "코드 조각 콘텐츠입니다. '${id}', '${id:label}', '${1:label}'을 변수에 사용하고 '$0', '$1'을 커서 위치에 사용하세요.",
	"snippetSchema.json.description": "코드 조각 설명입니다.",
	"snippetSchema.json.prefix": "IntelliSense에서 코드 조각을 선택할 때 사용할 접두사입니다.",
	"tsconfig.json.compilerOptions": "TypeScript 컴파일러에 .ts 파일을 컴파일하는 방법을 지시합니다.",
	"tsconfig.json.compilerOptions.charset": "입력 파일의 문자 집합",
	"tsconfig.json.compilerOptions.declaration": "해당하는 d.ts 파일을 생성합니다.",
	"tsconfig.json.compilerOptions.diagnostics": "진단 정보를 표시합니다.",
	"tsconfig.json.compilerOptions.emitBOM": "출력 파일의 시작에서 UTF-8 BOM(바이트 순서 표시)을 내보냅니다.",
	"tsconfig.json.compilerOptions.inlineSourceMap": "별도의 파일을 사용하는 대신 소스 맵과 함께 단일 파일을 내보냅니다.",
	"tsconfig.json.compilerOptions.inlineSources": "단일 파일 내에서 소스 맵과 함께 소스를 내보냅니다. --inlineSourceMap이 설정되어야 합니다.",
	"tsconfig.json.compilerOptions.listFiles": "컴파일의 일부로 파일의 이름을 인쇄합니다.",
	"tsconfig.json.compilerOptions.locale": "오류 메시지를 표시하는 데 사용할 로캘(예: en-us)입니다.",
	"tsconfig.json.compilerOptions.mapRoot": "디버거가 생성된 위치 대신 맵 파일을 찾아야 하는 위치를 지정합니다.",
	"tsconfig.json.compilerOptions.module": "모듈 코드 생성 지정: 'CommonJS', 'Amd', 'System' 또는 'UMD'.",
	"tsconfig.json.compilerOptions.newLine": "파일을 내보낼 때 사용할 줄 시퀀스의 끝을 지정하며, 'CRLF'(dos) 또는 'LF'(unix)입니다.",
	"tsconfig.json.compilerOptions.noEmit": "출력을 내보내지 마세요.",
	"tsconfig.json.compilerOptions.noEmitHelpers": "컴파일된 출력에서 __extends와 같은 사용자 지정 도우미 함수를 생성하지 않습니다.",
	"tsconfig.json.compilerOptions.noEmitOnError": "형식 검사 오류가 보고되면 출력을 내보내지 마세요.",
	"tsconfig.json.compilerOptions.noImplicitAny": "암시된 'any' 형식이 있는 식 및 선언이 발생할 경우 경고 표시",
	"tsconfig.json.compilerOptions.noLib": "기본 라이브러리 파일(lib.d.ts)을 포함하지 않습니다.",
	"tsconfig.json.compilerOptions.out": "출력을 연결하고 단일 파일로 내보냅니다.",
	"tsconfig.json.compilerOptions.outDir": "출력 구조를 디렉터리로 리디렉션합니다.",
	"tsconfig.json.compilerOptions.preserveConstEnums": "생성된 코드에서 const 열거형 선언을 지우지 마세요.",
	"tsconfig.json.compilerOptions.removeComments": "주석을 출력에 내보내지 마세요.",
	"tsconfig.json.compilerOptions.rootDir": "입력 파일의 루트 디렉터리를 지정합니다. --outDir이 포함된 출력 디렉터리 구조를 제어하는 데 사용됩니다.",
	"tsconfig.json.compilerOptions.sourceMap": "해당 '.map' 파일을 생성합니다.",
	"tsconfig.json.compilerOptions.sourceRoot": "디버거가 소스 위치 대신 TypeScript 파일을 찾아야 하는 위치를 지정합니다.",
	"tsconfig.json.compilerOptions.suppressImplicitAnyIndexErrors": "인덱스 서명이 없는 개체 인덱싱에 대한 noImplicitAny 오류를 표시하지 않습니다.",
	"tsconfig.json.compilerOptions.target": "ECMAScript 대상 버전 지정:  'ES3'(기본값), 'ES5' 또는 'ES6'(실험적).",
	"tsconfig.json.files": "'files' 속성이 tsconfig.json에 없는 경우 컴파일러는 포함하는 디렉터리와 하위 디렉터리의 모든 파일을 기본적으로 포함합니다. 'files' 속성이 지정된 경우에는 해당 파일만 포함됩니다.",
	"tsconfig.json.title": "TypeScript 컴파일러의 구성 파일에 대한 JSON 스키마"
}