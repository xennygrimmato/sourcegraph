/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"app.plugin.json.activationEvents": "插件的激活事件",
	"app.plugin.json.contributes": "此插件的贡献",
	"app.plugin.json.contributes.language": "插件的语言贡献",
	"app.plugin.json.contributes.language.aliases": "此语言的名称别名",
	"app.plugin.json.contributes.language.extensions": "关联到此语言的文件扩展名",
	"app.plugin.json.contributes.language.filenames": "关联到此语言的文件名",
	"app.plugin.json.contributes.language.id": "此语言的 ID",
	"app.plugin.json.dependencies": "插件依赖关系",
	"app.plugin.json.mainModule": "主 JavaScript 文件的相对路径",
	"app.plugin.json.pluginId": "唯一的插件 id",
	"app.plugin.json.scripts": "插件提供的脚本",
	"app.plugin.json.scripts.compile": "用于编译此插件的命令行",
	"bower.json.authors": "创作包内容的人员列表。",
	"bower.json.dependencies": "使用包名称的简单哈希指定依赖项到 semver 兼容标识符或 URL。",
	"bower.json.description": "通过简短说明帮助用户识别和搜索你的包。",
	"bower.json.devDependencies": "仅包开发需要的依赖项，例如测试框架或生成文档。",
	"bower.json.exportsOverride": "grunt-bower-task 用于指定自定义安装位置。",
	"bower.json.homepage": "可了解有关包的详细信息的 URL。如果未指定，返回 GitHub 项目并且它是一个 GitHub 端点。",
	"bower.json.ignore": "安装包时，Bower 要忽略的文件列表。",
	"bower.json.invalidPatternName": "以 _ 开头的任何属性有效。",
	"bower.json.keywords": "用于根据关键字搜索。有助于更轻松地查找你的包，而不必知道其名称。",
	"bower.json.license": "SPDX 许可证标识符或许可证的路径/URL",
	"bower.json.main": "使用你的包所需的主作用文件。",
	"bower.json.moduleType": "此包显示的模块类型",
	"bower.json.packagename": "你的包的名称。",
	"bower.json.private": "如果你将它设置为 true，它将拒绝发布它。这是防止意外发布专用存储库的方法。",
	"bower.json.repository": "可在其中找到源代码的存储库。",
	"bower.json.resolutions": "如果包之间发生冲突，自动解析的依赖项版本。",
	"bower.json.title": "Bower 配置文件的 JSON 架构",
	"bower.json.version": "语义版本号。",
	"global.json.projects": "与此文件相关的项目文件夹的列表。",
	"global.json.sources": "与此文件相关的源文件夹的列表。",
	"global.json.title": "ASP.NET 全局配置文件的 JSON 架构",
	"jsconfig.json.compilerOptions": "指导 JavaScript 语言服务如何验证 .js 文件",
	"jsconfig.json.compilerOptions.charset": "输入文件的字符集",
	"jsconfig.json.compilerOptions.decorators": "对 ES7 修饰器启用实验支持。",
	"jsconfig.json.compilerOptions.diagnostics": "显示诊断信息。",
	"jsconfig.json.compilerOptions.locale": "将用于显示错误消息的区域设置，如 zh-cn。",
	"jsconfig.json.compilerOptions.mapRoot": "指定调试器应放置映射文件的位置而不是生成的位置",
	"jsconfig.json.compilerOptions.module": "解析所依据的模块代码生成: \"commonjs\"、\"amd\"、\"system\" 或 \"umd\"。",
	"jsconfig.json.compilerOptions.noLib": "请勿包括默认库文件(lib.d.ts)。",
	"jsconfig.json.compilerOptions.target": "指定 ECMAScript 目标版本: \"ES3\" (默认)、\"ES5\" 或 \"ES6\" (实验)。",
	"jsconfig.json.exclude": "列出不应包括的文件和文件夹。\"files\" 属性存在时，不实现此属性。",
	"jsconfig.json.files": "如果 jsconfig.json 中不存在 \"files\" 属性，则语言服务默认包括所有文件(包括目录和子目录)。指定了 \"files\" 属性时，仅包括这些文件。",
	"jsconfig.json.title": "JavaScript 配置文件的 JSON 架构",
	"json.schema.unabletoload": "无法从 '{0}': {1} 加载架构。",
	"package.json.bugs": "应该将问题上报到的项目问题跟踪程序的 URL 和/或电子邮件地址。对于遇到与你的包有关的问题的人员，这些内容十分有用。",
	"package.json.bugs.email": "应向其报告问题的电子邮件地址。",
	"package.json.bugs.url": "项目的问题跟踪程序的 url。",
	"package.json.bundleDependencies": "将在发布包时捆绑的包名的数组。",
	"package.json.bundledDependencies": "将在发布包时捆绑的包名的数组。",
	"package.json.config": "\"config\" 哈希可以用于设置在包脚本中使用并且在各个升级间保持的配置参数。",
	"package.json.contributors": "为此包做出贡献的人员的列表。",
	"package.json.dependency": "使用包名的简单哈希指定依赖关系到版本范围。版本范围是具有一个或多个空格分隔描述符的字符串。还可以使用 tarball 或 git URL 标识依赖关系。",
	"package.json.descr": "这可帮助人们发现你的包，因为它会在“npm 搜索”中列出。",
	"package.json.description": "此包的 NPM 配置。",
	"package.json.directories.bin": "如果指定 \"bin\" 目录，则该文件夹中的所有文件都会用作 \"bin\" 哈希。",
	"package.json.directories.doc": "将标记文件置于此处。最后可能会在某天很好地显示这些文件。",
	"package.json.directories.example": "将示例脚本置于此处。它可能会在某天通过某种明智的方式公开。",
	"package.json.directories.lib": "告诉人们库的批量处于何处。无需以任何方式对 lib 文件夹执行任何特殊操作，但是它是有用的数据信息。",
	"package.json.directories.man": "充满手册页的文件夹。可有效用于通过浏览文件夹生成 \"man\" 数组。",
	"package.json.files": "\"files\" 字段是要包含在项目中的文件的数组。如果在数组中对某个文件夹命名，则它将也包含该文件夹中的文件。",
	"package.json.homepage": "项目主页的 url。",
	"package.json.keywords": "这可帮助人们发现你的包，因为它会在“npm 搜索”中列出。",
	"package.json.license": "应为你的包指定许可证，以便人们知道如何允许他们使用该包，以及你对该包施加的任何限制。",
	"package.json.licenses": "应为你的包指定许可证，以便人们知道如何允许他们使用该包，以及你对该包施加的任何限制。",
	"package.json.main": "主字段是你的程序的主入口点的模块 ID。",
	"package.json.maintainers": "维护此包的人员的列表。",
	"package.json.man": "指定单个文件或文件名数组以备 man 程序进行查找。",
	"package.json.name": "包的名称。",
	"package.json.person": "受邀创建或维护此包的人员",
	"package.json.preferGlobal": "如果你的包主要是应在全局安装的命令行应用程序，请将此值设置为 true 以在进行本地安装时提供警告。",
	"package.json.private": "如果设置为 true，则 npm 会拒绝发布它。",
	"package.json.repository": "指定你的代码所处的位置。对于要做出贡献的人员，这十分有用。",
	"package.json.scripts": "\"scripts\" 成员是在包生命周期中各个时间运行的脚本命令的对象哈希。键是生命周期事件，值是当时运行的命令。",
	"package.json.underscore": "以 _ 开头的任何属性有效。",
	"package.json.version": "版本必须可由 node-semver (作为依赖项与 npm 捆绑)分析。",
	"project.json.authors": "应用程序的设计者",
	"project.json.bundleExclude": "要从发布输出(kpm 捆绑)中排除的文件的列表。",
	"project.json.code": "指定需要编译的所有代码文件的 glob 模式。(数据类型: 具有 glob 模式的字符串或数组)。例如: [ 'Folder1*.cs', 'Folder2*.cs' ]",
	"project.json.commands": "可用于该应用程序的命令",
	"project.json.compilationOptions": "传递到 Roslyn 的编译选项",
	"project.json.configurations": "配置是编译设置的命名组。运行时中内置了 2 个默认值，即 \"Debug\" 和 \"Release\"。",
	"project.json.dependencies": "应用程序的依赖项。每次登录指定名称和 Nuget 包的版本。",
	"project.json.dependency.name": "该依赖项版本。",
	"project.json.dependency.type": "依赖项类型。只在生成时存在 'build' 依赖项",
	"project.json.description": "应用程序的说明",
	"project.json.exclude": "指示要从编译排除的所有代码文件的 glob 模式。(数据类型: 具有 glob 模式的字符串或数组)。",
	"project.json.frameworks": "将生成的目标框架和特定于配置的依赖项。",
	"project.json.preprocess": "指示要预处理的所有代码文件的 glob 模式。(数据类型: 具有 glob 模式的字符串)。",
	"project.json.resources": "指示要作为资源编译的所有文件的 glob 模式。",
	"project.json.script": "命令行脚本或脚本。\r\rAvailable variables:\r%project:Directory% - The project directory\r%project:Name% - The project name\r%project:Version% - 项目版本",
	"project.json.scripts": "不同阶段要执行的脚本。",
	"project.json.shared": "指定要与相关项目共享的代码文件的 glob 模式。例如: [ 'Folder1*.cs', 'Folder2*.cs' ]",
	"project.json.title": "ASP.NET project.json 文件的 JSON 架构",
	"project.json.version": "应用程序的版本。例如: 1.2.0.0",
	"project.json.webroot": "通过指定 project.json 文件中的 Webroot 属性，指定 Web 服务器根(aka 公共文件夹)。在 Visual Studio 中，此文件夹将用于获取 IIS 的根权限。应将静态文件放置在此处。",
	"schema.json": "使用架构描述 JSON 文件。参见 json-schema.org 了解详细信息。",
	"schema.json.$schema": "验证此文档的架构",
	"schema.json.additionalItems": "用于阵列，仅适用于项目被设置为一个数组。如果是一个架构，则在项目数组指定项目后，由此架构进行验证。如果为 false，则其他项目将导致验证失败。",
	"schema.json.additionalProperties": "是一个架构或者是一个布尔值。如果是一个架构，则用于验证所有与 'properties' or 'patternProperties' 不匹配的属性。如果为 false，则任何与上述两者不匹配的属性将导致此架构失败。",
	"schema.json.allOf": "架构的数组，所有必须匹配。",
	"schema.json.anyOf": "架构的数组，必须至少有一个匹配。",
	"schema.json.default": "默认值。由建议使用。",
	"schema.json.definitions": "不用于验证。将您希望使用 $ref 内嵌引用的子架构放在此处。",
	"schema.json.dependencies": "属性名称到属性名称数组或架构的映射。属性名称数组指的是命名的关键属性。这取决于为保证有效将显示在对象中的数组中的属性。如果该值是一个架构，则该架构仅应用于对象，如果关键属性存在于对象上。",
	"schema.json.description": "元素的详细描述。用于悬停菜单和建议。",
	"schema.json.enum": "一组有效的文字值",
	"schema.json.exclusiveMaximum": "使最大的属性成为专有属性。",
	"schema.json.exclusiveMininum": "使最小的属性成为专有属性。",
	"schema.json.id": "架构的唯一标识符。",
	"schema.json.items": "用于数组。可以是一个用于验证每个元素的架构，或按顺序验证每个项目的架构数组 (第一个架构将验证第一个元素，第二个架构将验证第二个元素，依此类推)。",
	"schema.json.maxItems": "一个数组内的项目的最大数量。包含。",
	"schema.json.maxLength": "字符串最大长度。",
	"schema.json.maxProperties": "一个对象可以拥有的属性的最大数量。包含。",
	"schema.json.maximum": "最大数值，默认包含。",
	"schema.json.minItems": "一个数组内的项目的最小数量。包含。",
	"schema.json.minLength": "一个字符串的最小长度。",
	"schema.json.minProperties": "一个对象可以拥有的属性的最小数量。包含。",
	"schema.json.minimum": "最小数值，默认包含。",
	"schema.json.multipleOf": "一个可以除尽当前值的数 (即，没有余数)",
	"schema.json.not": "必须不能匹配的架构。",
	"schema.json.oneOf": "架构的数组，正好有一个必须匹配。",
	"schema.json.pattern": "匹配字符串的正则表达式。不是隐含固定的。",
	"schema.json.patternProperties": "属性名称的正则表达式与架构的映射，用于匹配属性。",
	"schema.json.properties": "属性名称与每个属性架构的映射。",
	"schema.json.required": "字符串的数组，这些字符串列出了此对象需要的所有属性的名字。",
	"schema.json.title": "元素的描述性标题",
	"schema.json.type": "一个基本架构类型 (数字、整数、空、数组、对象、布尔值、字符串) 的字符串或一个指定这些类型子集的字符串的数组。",
	"schema.json.uniqueItems": "数组中所有项目是否必须唯一。默认为 false。",
	"snippetSchema.json": "用户代码片段配置",
	"snippetSchema.json.body": "代码片段内容。使用 \"${id}\"、\"${id:label}\"、\"${1:label}\" 作为变量，并使用 \"$0\" 和 \"$1\" 表示光标位置",
	"snippetSchema.json.description": "代码片段描述。",
	"snippetSchema.json.prefix": "在 Intellisense 中选择代码片段时将使用的前缀",
	"tsconfig.json.compilerOptions": "向 TypeScript 编译器指示如何编译 .ts 文件",
	"tsconfig.json.compilerOptions.charset": "输入文件的字符集",
	"tsconfig.json.compilerOptions.declaration": "生成相应的 d.ts 文件。",
	"tsconfig.json.compilerOptions.diagnostics": "显示诊断信息。",
	"tsconfig.json.compilerOptions.emitBOM": "在输出文件开头发出 UTF-8 字节顺序标记(BOM)。",
	"tsconfig.json.compilerOptions.inlineSourceMap": "发出单个文件以及源映射而不是单独的文件。",
	"tsconfig.json.compilerOptions.inlineSources": "随单个文件中的源映射一起发出源；需要设置 --inlineSourceMap。",
	"tsconfig.json.compilerOptions.listFiles": "编译的文件部分的打印名称。",
	"tsconfig.json.compilerOptions.locale": "将用于显示错误消息的区域设置，如 zh-cn。",
	"tsconfig.json.compilerOptions.mapRoot": "指定调试器应放置映射文件的位置而不是生成的位置",
	"tsconfig.json.compilerOptions.module": "指定模块代码生成: \"CommonJS\"、\"Amd\"、\"System\" 或 \"UMD\"。",
	"tsconfig.json.compilerOptions.newLine": "指定发出文件时要使用的行序列结尾: \"CRLF\" (dos)或 \"LF\" (unix)。",
	"tsconfig.json.compilerOptions.noEmit": "不发出输出。",
	"tsconfig.json.compilerOptions.noEmitHelpers": "请勿生成自定义 helper 函数，如编译输出中的 __extends。",
	"tsconfig.json.compilerOptions.noEmitOnError": "如果报告了任何类型检查错误，请勿发出输出。",
	"tsconfig.json.compilerOptions.noImplicitAny": "有关带隐式 \"any\" 类型的表达式和声明的警告。",
	"tsconfig.json.compilerOptions.noLib": "请勿包括默认库文件(lib.d.ts)。",
	"tsconfig.json.compilerOptions.out": "连接输出并将其发出到单个文件。",
	"tsconfig.json.compilerOptions.outDir": "将输出结构重定向到目录。",
	"tsconfig.json.compilerOptions.preserveConstEnums": "请勿清除生成代码中的常量枚举声明。",
	"tsconfig.json.compilerOptions.removeComments": "请勿将注释发到输出中。",
	"tsconfig.json.compilerOptions.rootDir": "指定输入文件的根目录。与 --outDir 一起用于控制输出目录结构。",
	"tsconfig.json.compilerOptions.sourceMap": "生成相应的 \".map\" 文件。",
	"tsconfig.json.compilerOptions.sourceRoot": "指定调试器应放置 TypeScript 文件的位置而不是源位置。",
	"tsconfig.json.compilerOptions.suppressImplicitAnyIndexErrors": "抑制缺少索引签名的索引对象的 noImplicitAny 错误。",
	"tsconfig.json.compilerOptions.target": "指定 ECMAScript 目标版本: \"ES3\" (默认)、\"ES5\" 或 \"ES6\" (实验)。",
	"tsconfig.json.files": "如果 tsconfig.json 中不存在 \"files\" 属性，则编译器默认为包括包含目录和子目录中的所有文件。指定 \"files\" 属性时，仅包括这些文件。",
	"tsconfig.json.title": "TypeScript 编译器的配置文件的 JSON 架构"
}