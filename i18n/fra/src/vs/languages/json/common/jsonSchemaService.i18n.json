/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"app.plugin.json.activationEvents": "Événements d'activation pour le plug-in",
	"app.plugin.json.contributes": "Contributions de ce plug-in",
	"app.plugin.json.contributes.language": "Contributions au langage du plug-in",
	"app.plugin.json.contributes.language.aliases": "Alias de nom pour ce langage",
	"app.plugin.json.contributes.language.extensions": "Extensions de fichier associées à ce langage",
	"app.plugin.json.contributes.language.filenames": "Noms de fichier associés à ce langage",
	"app.plugin.json.contributes.language.id": "ID de ce langage",
	"app.plugin.json.dependencies": "Dépendances du plug-in",
	"app.plugin.json.mainModule": "Chemin d'accès relatif au fichier JavaScript principal",
	"app.plugin.json.pluginId": "ID unique du plug-in",
	"app.plugin.json.scripts": "Scripts proposés par le plug-in",
	"app.plugin.json.scripts.compile": "Ligne de commande pour compiler ce plug-in",
	"bower.json.authors": "Liste des contributeurs au contenu du package.",
	"bower.json.dependencies": "Dépendances qui sont spécifiées avec un simple hachage de nom de package pour un identificateur ou une URL compatible semver.",
	"bower.json.description": "Permet d'identifier et de rechercher votre package avec une courte description.",
	"bower.json.devDependencies": "Dépendances qui sont uniquement nécessaires pour le développement du package, p. ex., framework de test ou documentation de génération.",
	"bower.json.exportsOverride": "Utilisé par une tâche grunt-bower-task pour spécifier des emplacements d'installation personnalisés.",
	"bower.json.homepage": "URL pour en savoir davantage sur le package. Revient au projet GitHub s'il n'est pas spécifié et s'il s'agit d'un point de terminaison GitHub.",
	"bower.json.ignore": "Liste de fichiers que Bower doit ignorer lors de l'installation de votre package.",
	"bower.json.invalidPatternName": "Toute propriété commençant par _ est valide.",
	"bower.json.keywords": "Utilisé dans la recherche par mot-clé. Il permet de découvrir plus facilement votre package sans connaître son nom.",
	"bower.json.license": "Identificateur de licence SPDX ou chemin/URL d'une licence.",
	"bower.json.main": "Principaux fichiers actifs nécessaires pour utiliser votre package.",
	"bower.json.moduleType": "Types de modules que ce package expose",
	"bower.json.packagename": "Nom de votre package.",
	"bower.json.private": "S'il a la valeur True, il refusera de la publier. C'est une façon d'éviter la publication accidentelle de référentiels privés.",
	"bower.json.repository": "Référentiel où se trouve le code source.",
	"bower.json.resolutions": "Versions de dépendances pour la résolution automatique en cas de conflits entre les packages.",
	"bower.json.title": "Schéma JSON pour les fichiers de configuration Bower",
	"bower.json.version": "Numéro de version sémantique.",
	"global.json.projects": "Liste de dossiers du projet relatifs à ce fichier",
	"global.json.sources": "Liste de dossiers sources relatifs à ce fichier",
	"global.json.title": "Schéma JSON pour les fichiers de configuration généraux d'ASP.NET",
	"jsconfig.json.compilerOptions": "Indique au service de langage JavaScript comment valider des fichiers .js",
	"jsconfig.json.compilerOptions.charset": "Jeu de caractères des fichiers d'entrée",
	"jsconfig.json.compilerOptions.decorators": "Active la prise en charge expérimentale pour les éléments décoratifs ES7.",
	"jsconfig.json.compilerOptions.diagnostics": "Affichez les informations de diagnostic.",
	"jsconfig.json.compilerOptions.locale": "Paramètres régionaux à utiliser pour afficher les messages d'erreur. Exemple : fr-fr.",
	"jsconfig.json.compilerOptions.mapRoot": "Spécifie l'emplacement dans lequel le débogueur doit localiser les fichiers de mappage plutôt que les emplacements générés",
	"jsconfig.json.compilerOptions.module": "Génération de code de module à résoudre : 'commonjs', 'amd', 'system' ou 'umd'.",
	"jsconfig.json.compilerOptions.noLib": "N'incluez pas le fichier bibliothèque par défaut (lib.d.ts).",
	"jsconfig.json.compilerOptions.target": "Spécifiez la version cible ECMAScript : 'ES3' (par défaut), 'ES5' ou 'ES6' (expérimentale).",
	"jsconfig.json.exclude": "Listez les fichiers et dossiers qui ne doivent pas être inclus. Cette propriété n'est pas honorée quand la propriété 'files' est présente.",
	"jsconfig.json.files": "Si aucune propriété 'files' n'est présente dans un fichier jsconfig.json, le service de langage inclut par défaut tous les fichiers, le répertoire conteneur et les sous-répertoires. Quand une propriété 'files' est spécifiée, seuls ces fichiers sont inclus.",
	"jsconfig.json.title": "Schéma JSON pour le fichier de configuration JavaScript",
	"json.schema.unabletoload": "Impossible de charger le schéma depuis '{0}' : {1}.",
	"package.json.bugs": "URL de l'utilitaire de suivi des problèmes de votre projet et/ou adresse électronique à laquelle signaler les problèmes. Ces éléments sont utiles pour les personnes qui rencontrent des problèmes avec votre package.",
	"package.json.bugs.email": "Adresse e-mail à laquelle signaler les problèmes.",
	"package.json.bugs.url": "URL de l'utilitaire de suivi des problèmes de votre projet.",
	"package.json.bundleDependencies": "Tableau des noms de package qui seront inclus lors de la publication du package.",
	"package.json.bundledDependencies": "Tableau des noms de package qui seront inclus lors de la publication du package.",
	"package.json.config": "Un hachage 'config' peut être utilisé pour définir des paramètres de configuration utilisés dans les scripts de package qui sont conservés lors des mises à niveau.",
	"package.json.contributors": "Liste des contributeurs à ce package.",
	"package.json.dependency": "Les dépendances sont spécifiées avec un simple hachage de nom de package pour une plage de versions. La plage de versions est une chaîne avec un ou plusieurs descripteurs séparés par des espaces. Les dépendances peuvent également être identifiées avec un tarball ou une URL Git.",
	"package.json.descr": "Cela permet aux utilisateurs de découvrir votre package, car il est répertorié dans 'npm search'.",
	"package.json.description": "Configuration NPM pour ce package.",
	"package.json.directories.bin": "Si vous spécifiez un répertoire 'bin', tous les fichiers dans ce dossier sont utilisés comme hachage'bin'.",
	"package.json.directories.doc": "Placez les fichiers Markdown ici. Finalement, ils s'afficheront correctement, peut-être, un jour.",
	"package.json.directories.example": "Placez les exemples de scripts ici. Un jour, la présentation sera peut-être plus intelligente.",
	"package.json.directories.lib": "Indiquez aux utilisateurs où se trouve la majeure partie de votre bibliothèque. Aucune action spéciale d'aucune sorte n'est effectuée sur le dossier lib, mais ce sont des métainformations utiles.",
	"package.json.directories.man": "Dossier rempli de pages man. Sugar pour générer un tableau 'man' en parcourant le dossier.",
	"package.json.files": "Le champ 'files' est un tableau de fichiers à inclure dans votre projet. Si un dossier est nommé dans le tableau, les fichiers situés dans ce dossier seront également inclus.",
	"package.json.homepage": "URL de la page d'accueil du projet.",
	"package.json.keywords": "Cela permet aux utilisateurs de découvrir votre package, car il est répertorié dans 'npm search'.",
	"package.json.license": "Vous devez indiquer une licence pour votre package afin que les utilisateurs connaissent les conditions d'utilisation et toutes les restrictions que vous avez définies.",
	"package.json.licenses": "Vous devez indiquer une licence pour votre package afin que les utilisateurs connaissent les conditions d'utilisation et toutes les restrictions que vous avez définies.",
	"package.json.main": "Le champ principal est un ID de module qui constitue le point d'entrée principal de votre programme.",
	"package.json.maintainers": "Liste des personnes qui tiennent ce package à jour",
	"package.json.man": "Spécifiez un fichier unique ou un tableau de noms de fichiers à mettre en place que le programme man peut rechercher.",
	"package.json.name": "Nom du package.",
	"package.json.person": "Personne qui a été impliquée dans la création ou la gestion de ce package",
	"package.json.preferGlobal": "Si votre package est principalement une application en ligne de commande qui doit être installée globalement, définissez la valeur true pour afficher un avertissement si elle est installée en local.",
	"package.json.private": "Si la valeur est true, npm refusera de le publier.",
	"package.json.repository": "Spécifiez l'emplacement du code. Cela est utile pour les personnes qui veulent contribuer.",
	"package.json.scripts": "Le membre 'scripts' est un hachage d'objet de commandes de script qui sont exécutées à différents moments du cycle de vie de votre package. La clé est l'événement du cycle de vie et la valeur est la commande à exécuter à ce stade.",
	"package.json.underscore": "Toute propriété commençant par _ est valide.",
	"package.json.version": "La version doit être analysable par node-semver, qui est fourni avec npm en tant que dépendance.",
	"project.json.authors": "Auteur de l'application",
	"project.json.bundleExclude": "Liste de fichiers à exclure de la sortie de publication (lot kpm).",
	"project.json.code": "Modèle Glob pour spécifier tous les fichiers de code qui doivent être compilés. (type de données : chaîne ou tableau avec modèle(s) Glob). Exemple : [ 'Dossier1*.cs', 'Dossier2*.cs' ]",
	"project.json.commands": "Commandes disponibles pour cette application",
	"project.json.compilationOptions": "Options de compilation transférées à Roslyn",
	"project.json.configurations": "Les configurations sont des groupes nommés de paramètres de compilation. Il existe 2 valeurs par défaut intégrées au runtime, à savoir 'Debug' et 'Release'.",
	"project.json.dependencies": "Dépendances de l'application. Chaque entrée spécifie le nom et la version d'un package Nuget.",
	"project.json.dependency.name": "Version de la dépendance.",
	"project.json.dependency.type": "Type de la dépendance. Les dépendances de 'build' n'existent qu'au moment de la génération",
	"project.json.description": "Description de l'application",
	"project.json.exclude": "Modèle Glob pour indiquer tous les fichiers de code à exclure de la compilation. (type de données : chaîne ou tableau avec modèle(s) Glob).",
	"project.json.frameworks": "Infrastructures cibles qui seront générées et dépendances spécifiques à la configuration.",
	"project.json.preprocess": "Modèle Glob pour indiquer que tous les fichiers de code doivent être prétraités. (type de données : chaîne avec modèle Glob).",
	"project.json.resources": "Modèle Glob pour indiquer tous les fichiers qui doivent être compilés comme ressources.",
	"project.json.script": "Script ou scripts de ligne de commande.\r\rVariables disponibles :\r%project:Directory% - Répertoire du projet\r%project:Name% - Nom du projet\r%project:Version% - Version du projet",
	"project.json.scripts": "Scripts à exécuter pendant les différentes phases.",
	"project.json.shared": "Modèle Glob pour spécifier tous les fichiers de code à partager avec les projets dépendants. Exemple : [ 'Dossier1*.cs', 'Dossier2*.cs' ]",
	"project.json.title": "Schéma JSON des fichiers ASP.NET project.json",
	"project.json.version": "Version de l'application. Exemple : 1.2.0.0",
	"project.json.webroot": "La spécification de la propriété webroot dans le fichier project.json spécifie la racine du serveur web (c'est-à-dire, dossier public). Dans Visual Studio, ce dossier sera utilisé à la racine IIS. Les fichiers statiques doivent être placés ici.",
	"schema.json": "Décrit un fichier JSON à l'aide d'un schéma. Voir json-schema.org pour plus d'infos.",
	"schema.json.$schema": "Schéma servant à la vérification de ce document.",
	"schema.json.additionalItems": "Pour les tableaux, uniquement lorsque les éléments sont définis comme tableau. S'il s'agit d'un schéma, celui-ci valide les éléments après ceux spécifiés par le tableau d'éléments. Si la valeur est false, les éléments supplémentaires entraînent l'échec de la validation.",
	"schema.json.additionalProperties": "Schéma ou booléen. S'il s'agit d'un schéma, il est utilisé pour valider toutes les propriétés non mises en correspondance par 'properties' ou 'patternProperties'. Si la valeur est false, toutes les propriétés non mises en correspondance par l'un ou l'autre entraînent l'échec du schéma.",
	"schema.json.allOf": "Tableau de schémas qui doivent tous correspondre.",
	"schema.json.anyOf": "Tableau de schémas dont au moins un doit correspondre.",
	"schema.json.default": "Valeur par défaut. Utilisée par les suggestions.",
	"schema.json.definitions": "Non utilisé pour la validation. Placez ici les sous-schémas que vous voulez référencer inline avec $ref",
	"schema.json.dependencies": "Mappage des noms de propriétés à un tableau de noms de propriétés ou un schéma. Un tableau de noms de propriétés implique que la propriété nommée dans la clé nécessite que les propriétés du tableau soient présentes dans l'objet pour être valide. Si la valeur est un schéma, celui-ci est uniquement appliqué à l'objet si la propriété dans la clé existe sur l'objet.",
	"schema.json.description": "Description longue de l'élément. Utilisée dans les menus sensitifs et les suggestions.",
	"schema.json.enum": "Ensemble des valeurs littérales valides",
	"schema.json.exclusiveMaximum": "Rend la propriété maximum exclusive.",
	"schema.json.exclusiveMininum": "Rend la propriété minimum exclusive.",
	"schema.json.id": "Identificateur unique du schéma.",
	"schema.json.items": "Pour les tableaux. Peut être soit un schéma en fonction duquel valider chaque élément, soit un tableau de schémas en fonction duquel valider chaque élément dans l'ordre (le premier schéma valide le premier élément, le deuxième schéma valide le deuxième élément, etc.).",
	"schema.json.maxItems": "Nombre maximum d'éléments pouvant figurer dans un tableau (inclusif).",
	"schema.json.maxLength": "Longueur maximum d'une chaîne.",
	"schema.json.maxProperties": "Nombre maximum de propriétés d'un objet (inclusif).",
	"schema.json.maximum": "Valeur numérique maximum, inclusive par défaut.",
	"schema.json.minItems": "Nombre minimum d'éléments pouvant figurer dans un tableau (inclusif).",
	"schema.json.minLength": "Longueur minimum d'une chaîne.",
	"schema.json.minProperties": "Nombre minimum de propriétés d'un objet (inclusif).",
	"schema.json.minimum": "Valeur numérique minimum, inclusive par défaut.",
	"schema.json.multipleOf": "Nombre qui doit diviser parfaitement la valeur actuelle (sans reste)",
	"schema.json.not": "Schéma qui ne doit pas correspondre.",
	"schema.json.oneOf": "Tableau de schémas, dont exactement un doit correspondre.",
	"schema.json.pattern": "Expression régulière à mettre en correspondance avec la chaîne. Elle n'est pas implicitement ancrée.",
	"schema.json.patternProperties": "Mappage d'expressions régulières sur les noms de propriété avec les schémas des propriétés correspondantes.",
	"schema.json.properties": "Mappage des noms de propriété avec les schémas de chaque propriété.",
	"schema.json.required": "Tableau de chaînes qui répertorie les noms de toutes les propriétés requises sur cet objet.",
	"schema.json.title": "Titre descriptif de l'élément. ",
	"schema.json.type": "Chaîne d'un des types de schéma de base (nombre, entier, Null, tableau, objet, booléen ou chaîne) ou tableau de chaînes spécifiant un sous-ensemble de ces types.",
	"schema.json.uniqueItems": "Si tous les éléments du tableau doivent être uniques. La valeur par défaut est false.",
	"snippetSchema.json": "Configuration de l'extrait de code utilisateur",
	"snippetSchema.json.body": "Contenu de l'extrait de code. Utilisez '${id}', '${id:label}', '${1:label}' pour les variables, et '$0', '$1' pour les positions du curseur",
	"snippetSchema.json.description": "Description de l'extrait de code.",
	"snippetSchema.json.prefix": "Préfixe à utiliser durant la sélection de l'extrait de code dans IntelliSense",
	"tsconfig.json.compilerOptions": "Indique au compilateur TypeScript comment compiler les fichiers .ts",
	"tsconfig.json.compilerOptions.charset": "Jeu de caractères des fichiers d'entrée",
	"tsconfig.json.compilerOptions.declaration": "Génère les fichiers d.ts correspondants.",
	"tsconfig.json.compilerOptions.diagnostics": "Affichez les informations de diagnostic.",
	"tsconfig.json.compilerOptions.emitBOM": "Émettez une marque d'ordre d'octet (BOM) UTF-8 au début des fichiers de sortie.",
	"tsconfig.json.compilerOptions.inlineSourceMap": "Émettez un seul fichier avec des mappages de sources au lieu d'avoir un fichier distinct.",
	"tsconfig.json.compilerOptions.inlineSources": "Émettez la source aux côtés des mappages de sources dans un fichier unique. Nécessite que --inlineSourceMap soit défini.",
	"tsconfig.json.compilerOptions.listFiles": "Imprimez les noms des fichiers faisant partie de la compilation.",
	"tsconfig.json.compilerOptions.locale": "Paramètres régionaux à utiliser pour afficher les messages d'erreur. Exemple : fr-fr.",
	"tsconfig.json.compilerOptions.mapRoot": "Spécifie l'emplacement dans lequel le débogueur doit localiser les fichiers de mappage plutôt que les emplacements générés",
	"tsconfig.json.compilerOptions.module": "Spécifiez la génération de code de module : 'CommonJS', 'Amd', 'System' ou 'UMD'.",
	"tsconfig.json.compilerOptions.newLine": "Spécifie la fin de la séquence de ligne à utiliser durant l'émission des fichiers : 'CRLF' (dos) ou 'LF' (unix).",
	"tsconfig.json.compilerOptions.noEmit": "Ne pas émettre de sortie.",
	"tsconfig.json.compilerOptions.noEmitHelpers": "Ne générez pas de fonctions d'assistance personnalisées comme __extends dans la sortie compilée.",
	"tsconfig.json.compilerOptions.noEmitOnError": "N'émettez pas de sorties si des erreurs de vérification de type ont été signalées.",
	"tsconfig.json.compilerOptions.noImplicitAny": "Avertit en cas d'expressions et de déclarations possédant un type 'any' implicite.",
	"tsconfig.json.compilerOptions.noLib": "N'incluez pas le fichier bibliothèque par défaut (lib.d.ts).",
	"tsconfig.json.compilerOptions.out": "Concaténer la sortie et l'émettre vers un seul fichier.",
	"tsconfig.json.compilerOptions.outDir": "Rediriger la structure de sortie vers le répertoire.",
	"tsconfig.json.compilerOptions.preserveConstEnums": "Ne pas effacer les déclarations d'enum const dans le code généré.",
	"tsconfig.json.compilerOptions.removeComments": "Ne pas publier de commentaires dans la sortie.",
	"tsconfig.json.compilerOptions.rootDir": "Spécifie le répertoire racine des fichiers d'entrée. Utilisé pour contrôler la structure de répertoires de sortie avec --outDir.",
	"tsconfig.json.compilerOptions.sourceMap": "Génère le fichier '.map' correspondant.",
	"tsconfig.json.compilerOptions.sourceRoot": "Spécifie l'emplacement dans lequel le débogueur doit localiser les fichiers TypeScript plutôt que les emplacements source.",
	"tsconfig.json.compilerOptions.suppressImplicitAnyIndexErrors": "Supprimer les erreurs noImplicitAny pour les objets d'indexation auxquels il manque des signatures d'index.",
	"tsconfig.json.compilerOptions.target": "Spécifiez la version cible ECMAScript : 'ES3' (par défaut), 'ES5' ou 'ES6' (expérimentale).",
	"tsconfig.json.files": "Si aucune propriété 'files' n'est présente dans un tsconfig.json, le compilateur inclut par défaut tous les fichiers, le répertoire contenant et les sous-répertoires. Quand une propriété 'files' est spécifiée, seuls ces fichiers sont inclus.",
	"tsconfig.json.title": "Schéma JSON pour le fichier de configuration du compilateur TypeScript"
}