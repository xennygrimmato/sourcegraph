/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"app.plugin.json.activationEvents": "プラグインのアクティブ化イベント",
	"app.plugin.json.contributes": "このプラグインの貢献",
	"app.plugin.json.contributes.language": "プラグインの言語貢献",
	"app.plugin.json.contributes.language.aliases": "この言語の名前エイリアス",
	"app.plugin.json.contributes.language.extensions": "この言語に関連付けられているファイル拡張子",
	"app.plugin.json.contributes.language.filenames": "この言語に関連付けられているファイル名",
	"app.plugin.json.contributes.language.id": "この言語の ID",
	"app.plugin.json.dependencies": "プラグインの依存関係",
	"app.plugin.json.mainModule": "メイン JavaScript ファイルへの相対パス",
	"app.plugin.json.pluginId": "一意のプラグイン ID",
	"app.plugin.json.scripts": "プラグインによって提供されるスクリプト",
	"app.plugin.json.scripts.compile": "このプラグインをコンパイルするためのコマンド ライン",
	"bower.json.authors": "パッケージのコンテンツを作成したユーザーのリスト。",
	"bower.json.dependencies": "依存関係は、semver の互換性のある識別子または URL のパッケージ名の単純なハッシュで指定します。",
	"bower.json.description": "簡単な説明を付けて、ユーザーがパッケージを特定および検索できるようにします。",
	"bower.json.devDependencies": "テスト フレームワークやドキュメントの作成など、パッケージ開発のみに必要な依存関係。",
	"bower.json.exportsOverride": "カスタム インストールの場所を指定するために grunt-bower-task により使用されます。",
	"bower.json.homepage": "パッケージに関する詳細の URL。指定されていない場合は GitHub プロジェクトにフォールバックし、GitHub エンドポイントになります。",
	"bower.json.ignore": "パッケージをインストールするときに Bower が無視するファイルの一覧。",
	"bower.json.invalidPatternName": "_ で始まるすべてのプロパティが有効です。",
	"bower.json.keywords": "キーワードでの検索に使用します。名前を知らない人がパッケージを簡単に見つけられるようにします。",
	"bower.json.license": "SPDX ライセンスの識別子、またはライセンスへのパス/URL。",
	"bower.json.main": "パッケージの使用に必要な、主に動作するファイル。",
	"bower.json.moduleType": "このパッケージが公開するモジュールの種類",
	"bower.json.packagename": "パッケージの名前。",
	"bower.json.private": "True に設定すると、発行を拒否します。これは、プライベート リポジトリが誤って発行されるのを回避する方法です。",
	"bower.json.repository": "ソース コードが見つかるリポジトリ。",
	"bower.json.resolutions": "パッケージ間で競合が発生した場合に自動的に解決する依存関係のバージョン。",
	"bower.json.title": "Bower 構成ファイルの JSON スキーマ",
	"bower.json.version": "セマンティックのバージョン番号。",
	"global.json.projects": "このファイルに関連するプロジェクト フォルダーの一覧。",
	"global.json.sources": "このファイルに関連するソース フォルダーの一覧。",
	"global.json.title": "ASP.NET グローバル構成ファイルの JSON スキーマ",
	"jsconfig.json.compilerOptions": ".js ファイルの検証方法を JavaScript 言語サービスに指示します",
	"jsconfig.json.compilerOptions.charset": "入力ファイルの文字セット",
	"jsconfig.json.compilerOptions.decorators": "ES7 デコレーターの実験的なサポートを有効にします。",
	"jsconfig.json.compilerOptions.diagnostics": "診断情報を表示します。",
	"jsconfig.json.compilerOptions.locale": "エラー メッセージの表示に使用するロケール (例えば en-us)。",
	"jsconfig.json.compilerOptions.mapRoot": "生成された場所の代わりに、デバッガーでマップ ファイルを探す場所を指定します",
	"jsconfig.json.compilerOptions.module": "解決の対象となるモジュール コード生成。 'commonjs'、'amd'、'system'、または 'umd' のいずれかです。",
	"jsconfig.json.compilerOptions.noLib": "既定のライブラリ ファイル (lib.d.ts) を含めません。",
	"jsconfig.json.compilerOptions.target": "ECMAScript のターゲット バージョンを指定します: 'ES3' (既定)、'ES5'、または 'ES6' (実験用)。",
	"jsconfig.json.exclude": "除外するファイルとフォルダーの一覧を示します。このプロパティは、'files\" プロパティが存在する場合には採用されません。",
	"jsconfig.json.files": "jsconfig.json の中に 'files' プロパティが存在しない場合、言語サービスの既定の動作として、ディレクトリやサブディレクトリに入っているすべてのファイルを含めます。'files' プロパティが指定されている場合は、それらのファイルだけが含まれます。",
	"jsconfig.json.title": "JavaScript 構成ファイル用の JSON スキーマ",
	"json.schema.unabletoload": "'{0}' からスキーマを読み込むことができません: {1}。",
	"package.json.bugs": "プロジェクトの問題追跡ツールの URL、または問題の報告先電子メール アドレス。これらは、パッケージで問題が発生するユーザーに役立ちます。",
	"package.json.bugs.email": "問題の報告先電子メール アドレス。",
	"package.json.bugs.url": "プロジェクトの問題追跡ツールの URL。",
	"package.json.bundleDependencies": "パッケージの発行時にバンドルされるパッケージ名の配列。",
	"package.json.bundledDependencies": "パッケージの発行時にバンドルされるパッケージ名の配列。",
	"package.json.config": "'config' ハッシュはを使用して、パッケージ スクリプトで使用されるアップグレード後も保持される構成パラメーターを設定できます。",
	"package.json.contributors": "このパッケージの共同作成者の一覧。",
	"package.json.dependency": "依存関係は、パッケージ名からバージョン範囲への単純なハッシュを使用して指定されます。バージョン範囲は、スペースで区切られた 1 つ以上の記述子が含まれる文字列です。依存関係は、ターボールまたは GIT URL によっても指定できます。",
	"package.json.descr": "これにより、'npm search' で一覧表示されるので、パッケージが見つけやすくなります。",
	"package.json.description": "このパッケージの NPM 構成。",
	"package.json.directories.bin": "'bin' ディレクトリを指定すると、そのフォルダー内のすべてのファイルは 'bin' ハッシュとして使用されます。",
	"package.json.directories.doc": "マークダウン ファイルをここに配置します。将来、これらは適切に表示される予定です。",
	"package.json.directories.example": "サンプル スクリプトをここに配置します。将来、より良い方法で公開される可能性があります。",
	"package.json.directories.lib": "ライブラリの大部分の配置場所を示します。lib フォルダーに特別なことをするわけではありませんが、便利なメタ情報です。",
	"package.json.directories.man": "完全な man ページを含むフォルダーです。フォルダーを調べて 'man' 配列を生成します。",
	"package.json.files": "'files' フィールドは、プロジェクトに含めるファイルの配列です。配列でフォルダーに名前を付けた場合、配列には、そのフォルダー内のファイルも含まれます。",
	"package.json.homepage": "プロジェクトのホームページへの URL です。",
	"package.json.keywords": "これにより、'npm search' で一覧表示されるので、パッケージが見つけやすくなります。",
	"package.json.license": "ユーザーがどの程度パッケージを使用できるのかを理解し、パッケージの使用に制限があるかどうかを理解できるよう、パッケージに特定のライセンスを指定する必要があります。",
	"package.json.licenses": "ユーザーがどの程度パッケージを使用できるのかを理解し、パッケージの使用に制限があるかどうかを理解できるよう、パッケージに特定のライセンスを指定する必要があります。",
	"package.json.main": "メイン フィールドは、プログラムへのプライマリ エントリ ポイントであるモジュール ID です。",
	"package.json.maintainers": "このパッケージをメンテナンスしているユーザーの一覧。",
	"package.json.man": "man プログラムが検索する場所に入れる単一ファイルまたはファイル名の配列のいずれかを指定します。",
	"package.json.name": "このパッケージの名前。",
	"package.json.person": "このパッケージの作成またはメンテナンスに関わっているユーザー",
	"package.json.preferGlobal": "パッケージが主にコマンド ライン アプリケーションでグローバルにインストールする必要のある場合、この値を true に設定しローカルにインストールされたときに警告を表示するようにします。",
	"package.json.private": "true に設定すると、npm によって発行が拒否されます。",
	"package.json.repository": "コードがある場所を指定します。これは、貢献したい人に役立ちます。",
	"package.json.scripts": "'scripts' メンバーは、パッケージのライフサイクル内で何度も実行されるスクリプト コマンドのオブジェクト ハッシュです。キーはライフサイクル イベントで、値はその時点で実行するコマンドです。",
	"package.json.underscore": "_ で始まるすべてのプロパティが有効です。",
	"package.json.version": "バージョンは、依存関係として npm とバンドルされる node-semver によって解析可能でなければなりません。",
	"project.json.authors": "このアプリケーションの作成者",
	"project.json.bundleExclude": "公開出力 (kpm バンドル) から除外するファイルの一覧。",
	"project.json.code": "コンパイルする必要があるすべてのコード ファイルを指定する glob パターン (データ型: glob パターンを持つ文字列または配列)。例: [ 'Folder1*.cs', 'Folder2*.cs' ]",
	"project.json.commands": "このアプリケーションで利用可能なコマンド",
	"project.json.compilationOptions": "Roslyn に渡されるコンパイル オプション",
	"project.json.configurations": "構成は、コンパイル設定の名前付きグループです。ランタイムにビルドされる既定値には、'Debug' と 'Release' の2 つがあります。",
	"project.json.dependencies": "アプリケーションの依存関係。各エントリは Nuget パッケージの名前とバージョンを指定します。",
	"project.json.dependency.name": "依存関係のバージョン。",
	"project.json.dependency.type": "依存関係の種類。'build' の依存関係が存在するのはビルド時のみです",
	"project.json.description": "アプリケーションの説明",
	"project.json.exclude": "コンパイルから除外するすべてのコード ファイルを示す glob パターン (データ型: glob パターンを使用する文字列または配列)。",
	"project.json.frameworks": "ビルドされるターゲット フレームワークと、構成に固有の依存関係。",
	"project.json.preprocess": "プリプロセスするすべてのコード ファイルを示す glob パターン (データ型: glob パターンを使用する文字列)。",
	"project.json.resources": "リソースとしてコンパイルする必要があるすべてのファイルを示す glob パターン。",
	"project.json.script": "コマンド ライン スクリプト。\r\r利用可能な変数:\r%project:Directory% - プロジェクトのディレクトリ\r%project:Name% - プロジェクト名\r%project:Version% - プロジェクトのバージョン",
	"project.json.scripts": "さまざまな段階で実行するスクリプト。",
	"project.json.shared": "依存プロジェクトと共有するコード ファイルを指定する glob パターン。例: [ 'Folder1*.cs', 'Folder2*.cs' ]",
	"project.json.title": "ASP.NET project.json ファイルの JSON スキーマ",
	"project.json.version": "アプリケーションのバージョン。例: 1.2.0.0",
	"project.json.webroot": "project.json ファイルで webroot プロパティを指定すると、Web サーバーのルート (パブリック フォルダー) が指定されます。Visual Studio では、このフォルダーはルート IIS に使用されます。静的ファイルはここに配置する必要があります。",
	"schema.json": "スキーマを使用して JSON ファイルを記述します。詳細については、json-schema.org を参照してください。",
	"schema.json.$schema": "このドキュメントを検証するためのスキーマ ",
	"schema.json.additionalItems": "配列に対応 (項目が配列として設定されている場合のみ)。スキーマの場合、このスキーマによって、項目の配列によって指定された項目の後にある項目が検証されます。false の場合、追加の項目により、検証に失敗します。",
	"schema.json.additionalProperties": "スキーマまたはブール値。スキーマの場合は、'properties' とも 'patternProperties' とも一致しないすべてのプロパティを検証するために使用されます。false の場合は、どちらとも一致しないプロパティがあれば、このスキーマは失敗します。",
	"schema.json.allOf": "スキーマの配列 (スキーマはすべて一致する必要があります)。",
	"schema.json.anyOf": "スキーマの配列 (この場合、少なくとも 1 つが一致する必要があります)。",
	"schema.json.default": "既定値。候補に使用されます。",
	"schema.json.definitions": "検証に使用されません。$ref を使用してインラインで参照するサブスキーマをここに配置してください",
	"schema.json.dependencies": "プロパティ名の配列、またはスキーマへのプロパティ名のマップ。プロパティ名の配列は、キー形式の名前が付いたプロパティが、有効にするためにオブジェクトに含まれている、配列内のプロパティによって決まることを意味します。値がスキーマの場合は、キー内のプロパティがオブジェクトに存在する場合のみ、スキーマがオブジェクトに適用されます。",
	"schema.json.description": "要素の詳しい説明。ホバー メニューや候補に使用されます。",
	"schema.json.enum": "有効なリテラル値のセット",
	"schema.json.exclusiveMaximum": "maximum プロパティを排他にします。",
	"schema.json.exclusiveMininum": "minimum プロパティを排他にします。",
	"schema.json.id": "スキーマの一意識別子。",
	"schema.json.items": "配列に対応。各要素の検証対象となるスキーマ、または各項目を順番 (最初のスキーマで最初の要素、2 番目のスキーマで 2 番目の要素を検証するなど) に検証する際に対象となるスキーマの配列になります。",
	"schema.json.maxItems": "配列内に含めることのできる項目の最大数 (その値を含む)。",
	"schema.json.maxLength": "文字列の最大長。",
	"schema.json.maxProperties": "オブジェクトに含めることのできるプロパティの最大数 (その値を含む)。",
	"schema.json.maximum": "最大数値 (既定で含む)。",
	"schema.json.minItems": "配列内に含めることのできる項目の最小数 (その値を含む)。",
	"schema.json.minLength": "文字列の最小長。",
	"schema.json.minProperties": "オブジェクトに含めることのできるプロパティの最小数 (その値を含む)。",
	"schema.json.minimum": "最小数値 (既定で含む)。",
	"schema.json.multipleOf": "現在の値を割り切れる数値 (つまり、余りなし)",
	"schema.json.not": "一致しないスキーマ。",
	"schema.json.oneOf": "スキーマの配列 (スキーマのうち 1 つは一致する必要があります)。",
	"schema.json.pattern": "文字列を照合する正規表現。これは暗黙的に固定されていません。",
	"schema.json.patternProperties": "一致するプロパティのスキーマへのプロパティ名の正規表現のマップ。",
	"schema.json.properties": "各プロパティのスキーマへのプロパティ名のマップ。",
	"schema.json.required": "このオブジェクトで必要なすべてのプロパティの名前を示す文字列の配列。",
	"schema.json.title": "要素のわかりやすいタイトル",
	"schema.json.type": "基本的なスキーマの種類のいずれかの文字列 (number、integer、null、array、object、boolean、string) またはこれらの種類のサブセットを示す文字列の配列。",
	"schema.json.uniqueItems": "配列内のすべての項目が一意である必要があるかどうか。既定値は false です。",
	"snippetSchema.json": "ユーザー スニペット構成",
	"snippetSchema.json.body": "スニペットの内容。変数には '${id}'、'${id:label}'、'${1:label}' を使用し、カーソル位置には '$0'、'$1' を使用します。",
	"snippetSchema.json.description": "スニペットについての記述。",
	"snippetSchema.json.prefix": "intellisense でスニペットを選択するときに使用するプレフィックス",
	"tsconfig.json.compilerOptions": ".ts ファイルをコンパイルする方法をTypeScript コンパイラに指示します。",
	"tsconfig.json.compilerOptions.charset": "入力ファイルの文字セット",
	"tsconfig.json.compilerOptions.declaration": "対応する d.ts ファイルを生成します。",
	"tsconfig.json.compilerOptions.diagnostics": "診断情報を表示します。",
	"tsconfig.json.compilerOptions.emitBOM": "出力ファイルの先頭に UTF-8 Byte Order Mark (BOM) を生成します。",
	"tsconfig.json.compilerOptions.inlineSourceMap": "ソース マップを別個のファイルにせずに、単一のファイルを生成します。",
	"tsconfig.json.compilerOptions.inlineSources": "単一のファイルの中にソースおよびソースマップを生成します。--inlineSourceMap が設定される必要があります。",
	"tsconfig.json.compilerOptions.listFiles": "コンパイルのファイル名部分を出力します。",
	"tsconfig.json.compilerOptions.locale": "エラー メッセージの表示に使用するロケール (例えば en-us)。",
	"tsconfig.json.compilerOptions.mapRoot": "生成された場所ではなくデバッガーがマップ ファイルを探す必要がある場所を指定します",
	"tsconfig.json.compilerOptions.module": "モジュール コード生成を指定します: 'CommonJS'、'Amd'、'System'、または 'UMD' です。",
	"tsconfig.json.compilerOptions.newLine": "ファイルの生成で使用される改行を指定します: 'CRLF' (dos) または 'LF' (unix) です。",
	"tsconfig.json.compilerOptions.noEmit": "出力を生成しません。",
	"tsconfig.json.compilerOptions.noEmitHelpers": "コンパイルされる出力で __extends などのカスタム ヘルパー関数を生成しません。",
	"tsconfig.json.compilerOptions.noEmitOnError": "チェック エラーが報告された場合は、出力を生成しません。",
	"tsconfig.json.compilerOptions.noImplicitAny": "暗黙的な 'any' 型を持つ式と宣言に対する警告。",
	"tsconfig.json.compilerOptions.noLib": "既定のライブラリ ファイル (lib.d.ts) を含めません。",
	"tsconfig.json.compilerOptions.out": "出力を連結して 1 つのファイルを生成します。",
	"tsconfig.json.compilerOptions.outDir": "ディレクトリへ出力構造をリダイレクトします。",
	"tsconfig.json.compilerOptions.preserveConstEnums": "生成されたコード内の const enum 宣言を消去しません。",
	"tsconfig.json.compilerOptions.removeComments": "コメントを出力しません。",
	"tsconfig.json.compilerOptions.rootDir": "入力ファイルのルート ディレクトリを指定します。--outDir と一緒に出力ディレクトリ構造を制御するために使用します。",
	"tsconfig.json.compilerOptions.sourceMap": "対応する '.map' ファイルを生成します。",
	"tsconfig.json.compilerOptions.sourceRoot": "ソースの場所ではなくデバッガーが TypeScript ファイルを探す必要がある場所を指定します。",
	"tsconfig.json.compilerOptions.suppressImplicitAnyIndexErrors": "インデックス シグニチャのないオブジェクトにインデックスを作成するため、noImplicitAny エラーを抑制します。",
	"tsconfig.json.compilerOptions.target": "ECMAScript のターゲット バージョンを指定します: 'ES3' (既定)、'ES5'、または 'ES6' (実験用)。",
	"tsconfig.json.files": "'files' プロパティが tsconfig.json に存在しない場合、コンパイラは既定でディレクトリおよびサブディレクトリを含むすべてのファイルを含めます。'files' プロパティを指定すると、それらのファイルだけが含まれます。",
	"tsconfig.json.title": "TypeScript コンパイラの構成ファイルの JSON スキーマ"
}