/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// Do not edit this file. It is machine generated.
{
	"app.plugin.json.activationEvents": "Eventos de activación para el complemento",
	"app.plugin.json.contributes": "Contribuciones de este complemento",
	"app.plugin.json.contributes.language": "Contribuciones de lenguaje del complemento",
	"app.plugin.json.contributes.language.aliases": "Alias de nombre para este lenguaje",
	"app.plugin.json.contributes.language.extensions": "Extensiones de archivo asociadas a este lenguaje",
	"app.plugin.json.contributes.language.filenames": "Nombres de archivo asociados a este lenguaje",
	"app.plugin.json.contributes.language.id": "Identificador de este lenguaje",
	"app.plugin.json.dependencies": "Dependencias del complemento",
	"app.plugin.json.mainModule": "Ruta relativa al archivo JavaScript principal",
	"app.plugin.json.pluginId": "El identificador único del complemento",
	"app.plugin.json.scripts": "Scripts ofrecidos por el complemento",
	"app.plugin.json.scripts.compile": "La línea de comandos para compilar este complemento",
	"bower.json.authors": "Una lista de personas que crearon el contenido del paquete.",
	"bower.json.dependencies": "Las dependencias se especifican con un hash sencillo del nombre del paquete en un identificador o una URL compatible con semver.",
	"bower.json.description": "Ayuda a los usuarios a identificar y buscar el paquete con una descripción breve.",
	"bower.json.devDependencies": "Las dependencias requeridas solo para el desarrollo del paquete; por ejemplo, marco de prueba o documentación de compilación.",
	"bower.json.exportsOverride": "Lo usa la tarea grunt-bower para especificar ubicaciones de instalación personalizadas.",
	"bower.json.homepage": "URL para obtener más información acerca del paquete. Retrocede al proyecto GitHub si no se ha especificado y al extremo de GitHub.",
	"bower.json.ignore": "Una lista de archivos de Bower que deben ignorarse al instalar el paquete.",
	"bower.json.invalidPatternName": "Cualquier propiedad que comience con _ es válida.",
	"bower.json.keywords": "Se usa para la búsqueda por palabra clave. Contribuye a que el paquete se detecte más fácilmente sin necesidad de que los usuarios sepan su nombre.",
	"bower.json.license": "Identificador de licencia SPDX o URL/ruta a una licencia.",
	"bower.json.main": "Los archivos de acción principales necesarios para usar el paquete.",
	"bower.json.moduleType": "Los tipos de módulos que expone este paquete",
	"bower.json.packagename": "El nombre del paquete.",
	"bower.json.private": "Si lo establece en \"true\", se rechazará su publicación. Se trata de un modo de evitar la publicación accidental de repositorios privados.",
	"bower.json.repository": "Repositorio en el que se puede encontrar el código fuente.",
	"bower.json.resolutions": "Las versiones de dependencias con las que resolver automáticamente en caso de conflicto entre paquetes.",
	"bower.json.title": "Esquema de JSON para archivos de configuración de Bower",
	"bower.json.version": "Un número de versión semántica.",
	"global.json.projects": "Una lista de carpetas de proyecto relacionadas con este archivo.",
	"global.json.sources": "Una lista de carpetas de origen relacionadas con este archivo.",
	"global.json.title": "Esquema JSON de los archivos globales de configuración de ASP.NET",
	"jsconfig.json.compilerOptions": "Indica al servicio de lenguaje JavaScript cómo validar archivos .js",
	"jsconfig.json.compilerOptions.charset": "El juego de caracteres de los archivos de entrada",
	"jsconfig.json.compilerOptions.decorators": "Activa el soporte experimental para Decorators ES7.",
	"jsconfig.json.compilerOptions.diagnostics": "Mostrar información de diagnóstico.",
	"jsconfig.json.compilerOptions.locale": "La configuración regional que se debe utilizar para mostrar los mensajes de error, p.ej. es-es.",
	"jsconfig.json.compilerOptions.mapRoot": "Especifica la ubicación en la que el depurador debe ubicar los archivos de asignación en lugar de las ubicaciones generadas",
	"jsconfig.json.compilerOptions.module": "Generación de código de módulo para resolver a partir de: 'commonjs', 'amd', 'system' o 'umd'.",
	"jsconfig.json.compilerOptions.noLib": "No incluir el archivo de biblioteca predeterminado (lib.d.ts).",
	"jsconfig.json.compilerOptions.target": "Especifique la versión de destino de ECMAScript: 'ES3' (predeterminado), 'ES5' o 'ES6' (experimental).",
	"jsconfig.json.exclude": "Enumerar los archivos y las carpetas que no deben incluirse. Esta propiedad no se respeta cuando la propiedad 'files' está presente.",
	"jsconfig.json.files": "Si no hay presente ninguna propiedad 'files' en un jsconfig.json, el servicio de lenguaje incluye todos los archivos del directorio que lo contiene y los subdirectorios de forma predeterminada. Cuando se especifica una propiedad 'files', solo se incluyen estos archivos.",
	"jsconfig.json.title": "Esquema JSON para el archivo de configuración JavaScript",
	"json.schema.unabletoload": "No se puede cargar el esquema de '{0}': {1}.",
	"package.json.bugs": "La dirección URL del rastreador de errores del proyecto o la dirección de correo electrónico a la que se deben notificar los errores. Son útiles para los usuarios que encuentran errores en el paquete.",
	"package.json.bugs.email": "La dirección de correo electrónico a la que se deben enviar los errores.",
	"package.json.bugs.url": "La dirección URL de la herramienta de seguimiento de errores del proyecto.",
	"package.json.bundleDependencies": "Matriz de nombres de paquete que se incluirá al publicar el paquete.",
	"package.json.bundledDependencies": "Matriz de nombres de paquete que se incluirá al publicar el paquete.",
	"package.json.config": "Se puede usar un hash 'config' para establecer los parámetros de configuración que se usan en los scripts del paquete que se conservan a través de las actualizaciones.",
	"package.json.contributors": "Una lista de los usuarios que contribuyeron en este paquete.",
	"package.json.dependency": "Las dependencias se especifican con un hash simple de nombre de paquete para el intervalo de versiones. El intervalo de versiones es una cadena con uno o varios descriptores separados por coma. Las dependencias también se pueden especificar con una dirección URL tarball o git.",
	"package.json.descr": "Esto ayuda a detectar el paquete tal y como aparece en 'npm search'.",
	"package.json.description": "Configuración NPM para este paquete.",
	"package.json.directories.bin": "Si especifica un directorio 'bin', todos los archivos de dicha carpeta se usarán como el hash 'bin'.",
	"package.json.directories.doc": "Coloque los archivos Markdown aquí. Algún día puede que se muestren correctamente.",
	"package.json.directories.example": "Coloque los scripts de ejemplo aquí. Algún día es posible que se muestren de manera más inteligente.",
	"package.json.directories.lib": "Indique a los usuarios dónde se encuentra la biblioteca. No se realiza nada especial con la carpeta lib, pero tiene información meta útil.",
	"package.json.directories.man": "Una carpeta llena de páginas man. Es útil para generar una matriz 'man' recorriendo la carpeta.",
	"package.json.files": "El campo 'files' es una matriz de archivos para incluir en el proyecto. Si da un nombre a una carpeta de la matriz, también incluirá los archivos de dicha carpeta.",
	"package.json.homepage": "La dirección URL a la página de inicio del proyecto.",
	"package.json.keywords": "Esto ayuda a detectar el paquete tal y como aparece en 'npm search'.",
	"package.json.license": "Debe especificar una licencia para el paquete de modo que los usuarios sepan cómo pueden usarlo y las restricciones que ha establecido.",
	"package.json.licenses": "Debe especificar una licencia para el paquete de modo que los usuarios sepan cómo pueden usarlo y las restricciones que ha establecido.",
	"package.json.main": "El campo principal es un identificador de módulo que es el punto de entrada principal al programa.",
	"package.json.maintainers": "Una lista de los usuarios que mantiene este paquete.",
	"package.json.man": "Especifique un único archivo o una matriz de nombres de archivo para que el programa principal los encuentre.",
	"package.json.name": "El nombre del paquete.",
	"package.json.person": "Un usuario implicado en la creación o el mantenimiento de este paquete",
	"package.json.preferGlobal": "Si el paquete es principalmente una aplicación de línea de comandos que se debe instalar de forma global, configure este valor en true para proporcionar una advertencia si se instala localmente.",
	"package.json.private": "Si se configura en true, npm no lo publicará.",
	"package.json.repository": "Especifique el lugar en el que se encuentra el código. Es útil para los usuarios que quieren contribuir.",
	"package.json.scripts": "El miembro 'scripts' es un hash de objeto de comandos de script que se ejecutan en varios momentos del ciclo de vida del paquete. La clave es el evento de ciclo de vida y el valor es el comando para ejecutar en ese momento.",
	"package.json.underscore": "Cualquier propiedad que comience con _ es válida.",
	"package.json.version": "Node-semver debe poder analizar la versión, que se empaqueta con npm como una dependencia.",
	"project.json.authors": "Autor de la aplicación",
	"project.json.bundleExclude": "Lista de archivos para excluir de la salida de la publicación (agrupación kpm).",
	"project.json.code": "Patrón global para especificar todos los archivos de código que deben compilarse. (tipo de datos: cadena o matriz con patrones globales). Ejemplo: [ 'Carpeta1*.cs', 'Carpeta2*.cs' ]",
	"project.json.commands": "Comandos disponibles para la aplicación",
	"project.json.compilationOptions": "Opciones de compilación que se transmiten a través de Roslyn",
	"project.json.configurations": "Las configuraciones son grupos con nombre de ajustes de compilación. Existen dos valores predeterminados compilados en el tiempo de ejecución, 'Debug' y 'Release'.",
	"project.json.dependencies": "Dependencias de la aplicación. Cada entrada especifica el nombre y la versión de un paquete Nuget.",
	"project.json.dependency.name": "Versión de la dependencia.",
	"project.json.dependency.type": "Tipo de la dependencia. Las dependencias del tipo \"build\" solo se dan a la hora de compilar",
	"project.json.description": "La descripción de la aplicación",
	"project.json.exclude": "Patrón global para indicar todos los archivos de código que deben excluirse de una compilación. (tipo de datos: cadena o matriz con patrones globales).",
	"project.json.frameworks": "Marcos de trabajo de destino que se compilarán y dependencias específicas de la configuración.",
	"project.json.preprocess": "Patrón global para indicar todos los archivos de código que deben procesarse previamente. (tipo de datos: cadena o matriz con patrones globales).",
	"project.json.resources": "Patrón global para indicar todos los archivos que deben compilarse como recursos.",
	"project.json.script": "Una o varias secuencias de líneas de comandos.\r\rVariables disponibles:\r%project:Directory%: directorio del proyecto\r%project:Name%: nombre del proyecto\r%project:Version%: versión del proyecto",
	"project.json.scripts": "Secuencias de comandos para ejecutar durante las diversas etapas.",
	"project.json.shared": "Patrón global para especificar los archivos de código para compartir con proyectos dependientes. Ejemplo: [ 'Carpeta1*.cs', 'Carpeta2*.cs' ]",
	"project.json.title": "Esquema JSON para archivos ASP.NET project.json",
	"project.json.version": "La versión de la aplicación. Ejemplo: 1.2.0.0",
	"project.json.webroot": "Al especificar la propiedad webroot en el archivo project.json, se especifica el servidor web raíz (carpeta pública). En Visual Studio, esta carpeta se usará para arraigar IIS. Los archivos estáticos deben colocarse aquí.",
	"schema.json": "Describe un archivo JSON mediante un esquema. Vea json-schema.org para obtener más información.",
	"schema.json.$schema": "El esquema para verificar el documento ",
	"schema.json.additionalItems": "Para matrices, solo cuando los elementos se hayan establecido como una matriz. Si es un esquema, los validará después de los que haya especificado la matriz de elementos. Cuando se establece en \"false\", los elementos adicionales provocarán un error en la validación.",
	"schema.json.additionalProperties": "Esquema o valor booleano. Si es un esquema, se usa para validar todas las propiedades sin coincidencias de \"properties\" o \"patternProperties\". Si es \"false\", las propiedades sin este tipo de coincidencias provocarán un error del esquema.",
	"schema.json.allOf": "Una matriz de esquemas, todos los cuales deben coincidir.",
	"schema.json.anyOf": "Una matriz de esquemas, donde al menos uno debe coincidir.",
	"schema.json.default": "Un valor predeterminado. Lo usan las sugerencias.",
	"schema.json.definitions": "No se usa para validar. Coloque aquí los esquemas secundarios a los que desee hacer referencia en línea con $ref",
	"schema.json.dependencies": "Mapa de nombres de propiedad para una matriz de nombres de propiedad o un esquema. Una matriz de nombres de propiedad significa que, para que sea válida, la propiedad denominada en la clave va a depender de las propiedades de la matriz que se encuentre en el objeto. Si el valor es un esquema, este se aplicará solamente al objeto si la propiedad en la clave existe en el objeto.",
	"schema.json.description": "Una descripción larga del elemento. Se usa en menús y sugerencias que aparecen al pasar el ratón.",
	"schema.json.enum": "El conjunto de valores literales que son válidos",
	"schema.json.exclusiveMaximum": "Hace exclusiva la propiedad Maximum.",
	"schema.json.exclusiveMininum": "Hace exclusiva la propiedad Minimum.",
	"schema.json.id": "Un identificador único para el esquema.",
	"schema.json.items": "Para matrices. Puede ser un esquema respecto al que validar cada elemento o una matriz de esquemas respecto a la que validar cada elemento por orden (el primer esquema validará al primer elemento, el segundo esquema validará al segundo elemento y así sucesivamente).",
	"schema.json.maxItems": "El número máximo de elementos que puede haber en una matriz. Inclusivo.",
	"schema.json.maxLength": "La longitud máxima de una cadena.",
	"schema.json.maxProperties": "El número máximo de propiedades que puede tener un objeto. Inclusivo.",
	"schema.json.maximum": "El máximo valor numérico, incluido de forma predeterminada.",
	"schema.json.minItems": "El número mínimo de elementos que puede haber en una matriz. Inclusivo.",
	"schema.json.minLength": "La longitud mínima de una cadena.",
	"schema.json.minProperties": "El número mínimo de propiedades que puede tener un objeto. Inclusive.",
	"schema.json.minimum": "El valor numérico mínimo, incluido de forma predeterminada.",
	"schema.json.multipleOf": "Un número que debe dividir de forma exacta el valor actual (es decir, sin resto)",
	"schema.json.not": "Un esquema que no debe tener coincidencias.",
	"schema.json.oneOf": "Una matriz de esquemas, de los cuales uno debe coincidir.",
	"schema.json.pattern": "Una expresión regular con la que hacer coincidir la cadena. No está anclada de forma implícita.",
	"schema.json.patternProperties": "Mapa de expresiones regulares de nombres de propiedad para hacer coincidir las propiedades de los esquemas.",
	"schema.json.properties": "Mapa de nombres de propiedad para esquemas para cada propiedad.",
	"schema.json.required": "Una matriz de cadenas que enumera los nombres de todas las propiedades necesarias para este objeto.",
	"schema.json.title": "Un título descriptivo del elemento",
	"schema.json.type": "Una cadena de uno de los tipos de esquema básicos (número, entero, valor NULL, matriz, objeto, valor booleano, cadena) o una matriz de cadenas que especifica un subconjunto de esos tipos.",
	"schema.json.uniqueItems": "Si todos los elementos en la matriz deben ser únicos. Establece el valor predeterminado en False.",
	"snippetSchema.json": "Configuración de fragmento de código por el usuario",
	"snippetSchema.json.body": "El contenido del fragmento de código. Utilice '${id}', '${id:label}', '${1:label}' para las variables y '$0', '$1' para las posiciones del cursor",
	"snippetSchema.json.description": "La descripción del fragmento de código.",
	"snippetSchema.json.prefix": "El prefijo que se debe utilizar al seleccionar el fragmento de código en Intellisense",
	"tsconfig.json.compilerOptions": "Indica al compilador TypeScript cómo compilar los archivos .ts",
	"tsconfig.json.compilerOptions.charset": "El juego de caracteres de los archivos de entrada",
	"tsconfig.json.compilerOptions.declaration": "Genera los correspondientes archivos d.ts.",
	"tsconfig.json.compilerOptions.diagnostics": "Mostrar información de diagnóstico.",
	"tsconfig.json.compilerOptions.emitBOM": "Emitir una marca de orden de bytes (BOM) UTF-8 al comienzo de los archivos de salida.",
	"tsconfig.json.compilerOptions.inlineSourceMap": "Emita un solo archivo con mapas de origen en lugar de tener un archivo independiente.",
	"tsconfig.json.compilerOptions.inlineSources": "Emitir el código fuente junto a los mapas de origen dentro de un solo archivo; se necesita --inlineSourceMap para poder establecerlo.",
	"tsconfig.json.compilerOptions.listFiles": "Imprima los nombres de los archivos que son parte de la compilación.",
	"tsconfig.json.compilerOptions.locale": "La configuración regional que se debe utilizar para mostrar los mensajes de error, p.ej. es-es.",
	"tsconfig.json.compilerOptions.mapRoot": "Especifica la ubicación en la que el depurador debe ubicar los archivos de asignación en lugar de las ubicaciones generadas",
	"tsconfig.json.compilerOptions.module": "Especifique la generación de código del módulo: 'CommonJS', 'Amd', 'System' o 'UMD'.",
	"tsconfig.json.compilerOptions.newLine": "Especifica el final de la secuencia de líneas que debe utilizarse al emitir archivos: 'CRLF' (dos) o 'LF' (unix).",
	"tsconfig.json.compilerOptions.noEmit": "No emitir salida.",
	"tsconfig.json.compilerOptions.noEmitHelpers": "No generar funciones de auxiliar personalizadas como __extends en la salida compilada.",
	"tsconfig.json.compilerOptions.noEmitOnError": "No emita salidas si se informó de cualquier error de comprobación de tipos.",
	"tsconfig.json.compilerOptions.noImplicitAny": "Advertir si existen expresiones y declaraciones con un tipo 'any' implícito.",
	"tsconfig.json.compilerOptions.noLib": "No incluir el archivo de biblioteca predeterminado (lib.d.ts).",
	"tsconfig.json.compilerOptions.out": "Concatene y emita la salida en un único archivo.",
	"tsconfig.json.compilerOptions.outDir": "Redirija la estructura de salida al directorio.",
	"tsconfig.json.compilerOptions.preserveConstEnums": "No borre las declaraciones de enumeración const en el código generado.",
	"tsconfig.json.compilerOptions.removeComments": "No emitir comentarios para la salida.",
	"tsconfig.json.compilerOptions.rootDir": "Especifica el directorio raíz de los archivos de entrada. Se usa para controlar la estructura del directorio de salida con --outDir.",
	"tsconfig.json.compilerOptions.sourceMap": "Genera el archivo '.map' correspondiente.",
	"tsconfig.json.compilerOptions.sourceRoot": "Especifica la ubicación en la que el depurador debe ubicar los archivos TypeScript en lugar de las ubicaciones de origen.",
	"tsconfig.json.compilerOptions.suppressImplicitAnyIndexErrors": "Eliminar errores de noImplicitAny para los objetos de indización a los que les falten firmas de índice.",
	"tsconfig.json.compilerOptions.target": "Especificar la versión de destino de ECMAScript: 'ES3' (predeterminado), 'ES5' o 'ES6' (experimental).",
	"tsconfig.json.files": "Si no se encuentra una propiedad 'files' en un archivo tsconfig.json, el compilador incluye de forma predeterminada en todos los archivos el directorio que los contienes y los subdirectorios. Cuando se especifica una propiedad 'files', solo se incluyen dichos archivos.",
	"tsconfig.json.title": "Esquema JSON para el archivo de configuración del compilador TypeScript"
}