// generated by gen-mocks; DO NOT EDIT

package mockstore

import (
	"time"

	"golang.org/x/net/context"
	"sourcegraph.com/sourcegraph/sourcegraph/api/sourcegraph"
	"sourcegraph.com/sourcegraph/sourcegraph/pkg/store"
)

type Builds struct {
	Get_            func(ctx context.Context, build sourcegraph.BuildSpec) (*sourcegraph.Build, error)
	List_           func(ctx context.Context, opt *sourcegraph.BuildListOptions) ([]*sourcegraph.Build, error)
	Create_         func(v0 context.Context, v1 *sourcegraph.Build) (*sourcegraph.Build, error)
	Update_         func(ctx context.Context, build sourcegraph.BuildSpec, info sourcegraph.BuildUpdate) error
	ListBuildTasks_ func(ctx context.Context, build sourcegraph.BuildSpec, opt *sourcegraph.BuildTaskListOptions) ([]*sourcegraph.BuildTask, error)
	CreateTasks_    func(ctx context.Context, tasks []*sourcegraph.BuildTask) ([]*sourcegraph.BuildTask, error)
	UpdateTask_     func(ctx context.Context, task sourcegraph.TaskSpec, info sourcegraph.TaskUpdate) error
	DequeueNext_    func(ctx context.Context) (job *sourcegraph.BuildJob, repoPath string, err error)
	GetTask_        func(ctx context.Context, task sourcegraph.TaskSpec) (*sourcegraph.BuildTask, error)
}

func (s *Builds) Get(ctx context.Context, build sourcegraph.BuildSpec) (*sourcegraph.Build, error) {
	return s.Get_(ctx, build)
}

func (s *Builds) List(ctx context.Context, opt *sourcegraph.BuildListOptions) ([]*sourcegraph.Build, error) {
	return s.List_(ctx, opt)
}

func (s *Builds) Create(v0 context.Context, v1 *sourcegraph.Build) (*sourcegraph.Build, error) {
	return s.Create_(v0, v1)
}

func (s *Builds) Update(ctx context.Context, build sourcegraph.BuildSpec, info sourcegraph.BuildUpdate) error {
	return s.Update_(ctx, build, info)
}

func (s *Builds) ListBuildTasks(ctx context.Context, build sourcegraph.BuildSpec, opt *sourcegraph.BuildTaskListOptions) ([]*sourcegraph.BuildTask, error) {
	return s.ListBuildTasks_(ctx, build, opt)
}

func (s *Builds) CreateTasks(ctx context.Context, tasks []*sourcegraph.BuildTask) ([]*sourcegraph.BuildTask, error) {
	return s.CreateTasks_(ctx, tasks)
}

func (s *Builds) UpdateTask(ctx context.Context, task sourcegraph.TaskSpec, info sourcegraph.TaskUpdate) error {
	return s.UpdateTask_(ctx, task, info)
}

func (s *Builds) DequeueNext(ctx context.Context) (job *sourcegraph.BuildJob, repoPath string, err error) {
	return s.DequeueNext_(ctx)
}

func (s *Builds) GetTask(ctx context.Context, task sourcegraph.TaskSpec) (*sourcegraph.BuildTask, error) {
	return s.GetTask_(ctx, task)
}

var _ store.Builds = (*Builds)(nil)

type BuildLogs struct {
	Get_ func(ctx context.Context, task sourcegraph.TaskSpec, minID string, minTime, maxTime time.Time) (*sourcegraph.LogEntries, error)
}

func (s *BuildLogs) Get(ctx context.Context, task sourcegraph.TaskSpec, minID string, minTime, maxTime time.Time) (*sourcegraph.LogEntries, error) {
	return s.Get_(ctx, task, minID, minTime, maxTime)
}

var _ store.BuildLogs = (*BuildLogs)(nil)
