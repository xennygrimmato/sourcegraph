syntax = "proto3";
package sourcegraph;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "sourcegraph.com/sourcegraph/go-diff/diff/diff.proto";
import "sourcegraph.com/sourcegraph/sourcegraph/pkg/vcs/vcs.proto";
import "sourcegraph.com/sourcegraph/srclib/graph/def.proto";
import "sourcegraph.com/sourcegraph/srclib/graph/ref.proto";
import "sourcegraph.com/sqs/pbtypes/timestamp.proto";
import "sourcegraph.com/sqs/pbtypes/void.proto";
import "sourcegraph.com/sqs/pbtypes/html.proto";
import "sourcegraph.com/sourcegraph/sourcegraph/pkg/inventory/inventory.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;

// Origin represents the origin of a resource that canonically lives
// on an external service (e.g., a repo hosted on GitHub).
message Origin {
	// ServiceType indicates which service is running on an origin. A
	// repo whose origin service is GitHub, for example, should be
	// accessed using a GitHub API client.
	//
	// If there are multiple API versions for a service, separate
	// entries may be added per API version. In that case, the
	// APIBaseURL may need to differ as well. The API client code is
	// responsible for handling these cases.
	enum ServiceType {
		// GitHub indicates that the origin is GitHub.com or a GitHub
		// Enterprise server. If the latter, the origin base URL indicates
		// the URL to the GitHub Enterprise server's API.
		GitHub = 0;
	}

	// ID is an identifier for the resource on its origin
	// service. Although numeric IDs are used on many services (GitHub
	// and Bitbucket, for example), this field is a string so that it
	// supports non-numeric IDs (which are used on Google Cloud
	// Platform and probably other services that Sourcegraph might
	// support in the future).
	//
	// If the ID is numeric, this string is the base-10 string
	// representation of the numeric ID (e.g., "1234"), with no
	// leading 0s.
	string ID = 1;

	// Service is the type service that the resource canonically lives
	// on. It is used to determine which API client should be used to
	// access it on the origin service (e.g., GitHub vs. Bitbucket).
	ServiceType Service = 2 [(gogoproto.jsontag) = ""]; // don't omitempty

	// APIBaseURL is the base URL to the API of the origin service for
	// the resource. (E.g., "https://api.github.com" for
	// GitHub.com-hosted repos.)
	string APIBaseURL = 3;
}

// CombinedStatus is the combined status (i.e., incorporating statuses from all
// contexts) of the repository at a specific rev.
message CombinedStatus {
	// Rev is the revision that this status describes. It is set mutually exclusive with CommitID.
	string Rev = 4;

	// CommitID is the full commit ID of the commit this status describes. It is set mutually exclusively with Rev.
	string CommitID = 1;

	// State is the combined status of the repository. Possible values are: failure,
	// pending, or success.
	string State = 2;

	// Statuses are the statuses for each context.
	repeated RepoStatus Statuses = 3;
}

// ListOptions specifies general pagination options for fetching a list of results.
message ListOptions {
	int32 PerPage = 1 [(gogoproto.moretags) = "url:\",omitempty\""];
	int32 Page = 2 [(gogoproto.moretags) = "url:\",omitempty\""];
}

// ListResponse specifies a general paginated response when fetching a list of results.
message ListResponse {
	// Total is the total number of results in the list.
	int32 Total = 1 [(gogoproto.moretags) = "url:\",omitempty\""];
}

// StreamResponse specifies a paginated response where the total number of results
// that can be returned is too expensive to compute, unbounded, or unknown.
message StreamResponse {
	// HasMore is true if there are more results available after the returned page.
	bool HasMore = 1 [(gogoproto.moretags) = "url:\",omitempty\""];
}

// RepoConfig describes a repository's config. This config is
// Sourcegraph-specific and is persisted locally.
message RepoConfig {
	// Apps is a list of app IDs denoting the applications that are
	// enabled for this repository.
	repeated string Apps = 1;
}

// Repo represents a source code repository.
message Repo {
	// ID is the unique numeric ID for this repository.
	int32 ID = 18;

	// URI is a normalized identifier for this repository based on its primary clone
	// URL. E.g., "github.com/user/repo".
	string URI = 1;

	// Owner is the repository owner (user or organizatin) of the repository. (For
	// example, for "github.com/user/repo", the owner is "user".)
	string Owner = 2;

	// Name is the base name (the final path component) of the repository, typically
	// the name of the directory that the repository would be cloned into. (For
	// example, for git://example.com/foo.git, the name is "foo".)
	string Name = 3;

	// Description is a brief description of the repository.
	string Description = 4;

	// HTTPCloneURL is the HTTPS clone URL of the repository (or the HTTP clone URL, if
	// no HTTPS clone URL is available).
	string HTTPCloneURL = 5;

	// SSHCloneURL is the SSH clone URL if the repository, if any.
	string SSHCloneURL = 6;

	// HomepageURL is the URL to the repository's homepage, if any.
	string HomepageURL = 7;

	// HTMLURL is the URL to the repository's main page on the
	// Sourcegraph server.
	string HTMLURL = 22;

	// DefaultBranch is the default git branch used (typically "master").
	string DefaultBranch = 8;

	// Language is the primary programming language used in this repository.
	string Language = 9;

	// Blocked is whether this repo has been blocked by an admin (and
	// will not be returned via the external API).
	bool Blocked = 10;

	// Deprecated repositories are labeled as such and hidden from global search
	// results.
	bool Deprecated = 11;

	// Fork is whether this repository is a fork.
	bool Fork = 12;

	// Mirror indicates whether this repo's canonical location is on
	// another server. Mirror repos track their upstream. If this repo
	// canonically lives on a repo hosting that can supply additional
	// metadata (such as GitHub), the Origin field should be set.
	bool Mirror = 13;

	// Private is whether this repository is private.
	bool Private = 14;

	// CreatedAt is when this repository was created. If it represents an externally
	// hosted (e.g., GitHub) repository, the creation date is when it was created at
	// that origin.
	pbtypes.Timestamp CreatedAt = 15;

	// UpdatedAt is when this repository's metadata was last updated (on its origin if
	// it's an externally hosted repository).
	pbtypes.Timestamp UpdatedAt = 16;

	// PushedAt is when this repository's was last (VCS-)pushed to.
	pbtypes.Timestamp PushedAt = 17;

	// Origin describes the repo's canonical location. It is only
	// populated for mirror repos; for non-mirror repos, it is null.
	Origin Origin = 19;
}

message RepoListOptions {
	string Name = 1 [(gogoproto.moretags) = "url:\",omitempty\""];

	// Specifies a search query for repositories. If specified, then the Sort and
	// Direction options are ignored
	string Query = 2 [(gogoproto.moretags) = "url:\",omitempty\""];

	repeated string URIs = 3 [(gogoproto.moretags) = "url:\",comma,omitempty\""];
	string Sort = 5 [(gogoproto.moretags) = "url:\",omitempty\""];
	string Direction = 6 [(gogoproto.moretags) = "url:\",omitempty\""];
	bool NoFork = 7 [(gogoproto.moretags) = "url:\",omitempty\""];
	string Type = 8 [(gogoproto.moretags) = "url:\",omitempty\""];
	string Owner = 10 [(gogoproto.moretags) = "url:\",omitempty\""];
	ListOptions ListOptions = 11 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// RepoRevSpec specifies a repository at a specific commit.
message RepoRevSpec {
	int32 Repo = 1;

	// CommitID is the 40-character SHA-1 of the Git commit ID.
	//
	// Revision specifiers are not allowed here. To resolve a revision
	// specifier (such as a branch name or "master~7"), call
	// Repos.GetCommit.
	string CommitID = 2;
}

// RepoSpec specifies a repository.
message RepoSpec {
	int32 ID = 1;
}

// RepoStatus is the status of the repository at a specific rev (in a single
// context).
message RepoStatus {
	// State is the current status of the repository. Possible values are: pending,
	// success, error, or failure.
	string State = 2;

	// TargetURL is the URL of the page representing this status. It will be linked
	// from the UI to allow users to see the source of the status.
	string TargetURL = 3;

	// Description is a short, high-level summary of the status.
	string Description = 4;

	// A string label to differentiate this status from the statuses of other systems.
	string Context = 5;

	pbtypes.Timestamp CreatedAt = 6 [(gogoproto.nullable) = false];
	pbtypes.Timestamp UpdatedAt = 7 [(gogoproto.nullable) = false];
}

message RepoStatusList {
	repeated RepoStatus RepoStatuses = 1;
}

message RepoStatusesCreateOp {
	RepoRevSpec Repo = 1 [(gogoproto.nullable) = false];
	RepoStatus Status = 2 [(gogoproto.nullable) = false];
}

message RepoList {
	repeated Repo Repos = 1;
}

service RepoStatuses {
	// GetCombined fetches the combined repository status for the given commit.
	rpc GetCombined(RepoRevSpec) returns (CombinedStatus);

	// GetCoverage fetches the coverage data for all repositories.
	rpc GetCoverage(pbtypes.Void) returns (RepoStatusList);

	// Create creates a repository status for the given commit.
	rpc Create(RepoStatusesCreateOp) returns (RepoStatus);
}

// Repos exposes information about and actions on both locally hosted
// and remote repositories.
service Repos {
	// Get fetches a repository.
	rpc Get(RepoSpec) returns (Repo);

	// Resolve looks up a repo from its "path", which is a
	// slash-separated string (e.g., "github.com/user/repo"). Resolve
	// may have to consult external sources (such as GitHub) to
	// resolve a path. It returns the repo's ID if it has been created
	// on Sourcegraph, plus additional metadata about the repository
	// that was determined during the resolution operation.
	//
	// Example use case: The app calls Resolve to support navigating
	// directly to "https://sourcegraph.com/github.com/my/repo" when
	// that has not been created yet. It calls Resolve with
	// "github.com/my/repo". It will transparently call Repos.Create
	// if it gets a RemoteRepo back from Resolve.
	rpc Resolve(RepoResolveOp) returns (RepoResolution);

	// List repositories.
	rpc List(RepoListOptions) returns (RepoList);

	// List remote repositories (on GitHub) associated with the
	// currently authenticated actor.
	rpc ListRemote(ReposListRemoteOptions) returns (RemoteRepoList);

	// Create creates a new repository.
	rpc Create(ReposCreateOp) returns (Repo);

	// Update updates a repository.
	rpc Update(ReposUpdateOp) returns (Repo);

	// Delete removes a repository.
	rpc Delete(RepoSpec) returns (pbtypes.Void);

	// GetConfig retrieves the configuration for a repository.
	rpc GetConfig(RepoSpec) returns (RepoConfig);

	// TODO(sqs!nodb-ctx): move these to a "VCS" service (not Repos)
	rpc GetCommit(RepoRevSpec) returns (vcs.Commit);

	// ResolveRev resolves a VCS revision specifier (e.g., a branch or
	// "master~7") to its underlying commit ID.
	rpc ResolveRev(ReposResolveRevOp) returns (ResolvedRev);

	// ListCommits returns the list of commits that span between the revisions
	// specified in the given DeltaSpec. By default, it will return 1 page of
	// commits with a maximum of DefaultPerPage entries. To retrieve all commits
	// the PerPage value can be set to -1.
	rpc ListCommits(ReposListCommitsOp) returns (CommitList);
	rpc ListBranches(ReposListBranchesOp) returns (BranchList);
	rpc ListTags(ReposListTagsOp) returns (TagList);

	rpc ListDeps(URIList) returns (URIList);

	// ListCommitters returns the list of authors who have contributed
	// to the main branch of the repo.
	rpc ListCommitters(ReposListCommittersOp) returns (CommitterList);

	// GetSrclibDataVersionForPath searches for the newest commit
	// built by srclib for the given path and commit. If the
	// TreeEntrySpec's Path field refers to a file or directory, the
	// commit log for that path will be consulted and only srclib data
	// versions will be returned that are after the most recent change
	// affecting the path. If the TreeEntrySpec's path is empty (""),
	// the most recently built commit on the TreeEntrySpec's branch
	// (rev) is returned, subject to an implementation-defined maximum
	// depth.
	//
	// Defining this method separately from the methods on Builds let
	// us have this specific behavior and makes it easier to supply
	// srclib data for older versions that is still accurate.
	rpc GetSrclibDataVersionForPath(TreeEntrySpec) returns (SrclibDataVersion);

	// ConfigureApp configures an application for a repository.
	rpc ConfigureApp(RepoConfigureAppOp) returns (pbtypes.Void);

	// GetInventory performs an inventory of the repository's contents
	// at a specific commit. It returns a summary of the programming
	// languages, etc., used by the repository, as evidenced by the
	// repository's files.
	rpc GetInventory(RepoRevSpec) returns (inventory.Inventory);

	rpc ReceivePack(ReceivePackOp) returns (Packet);
	rpc UploadPack(UploadPackOp) returns (Packet);
}

// ReposResolveRevOp specifies a Repos.ResolveRev operation.
message ReposResolveRevOp {
	int32 repo = 1;

	// Rev is a VCS revision specifier, such as a branch or
	// "master~7".
	string rev = 2;
}

// ResolvedRev is the result of resolving a VCS revision specifier to
// an absolute commit ID.
message ResolvedRev {
	// CommitID is the 40-character absolute SHA-1 hex digest of the
	// commit's Git oid.
	string CommitID = 1;
}

message ReceivePackOp {
	int32 repo = 1;
	bytes data = 3;
	bool advertiseRefs = 4;
}

message UploadPackOp {
	int32 repo = 1;
	bytes data = 3;
	bool advertiseRefs = 4;
}

message URIList {
	repeated string URIs = 1;
}

message Packet {
	bytes data = 1;
}

message RepoResolveOp {
	// Path is some repo path, such as "github.com/user/repo".
	string path = 1;

	// Remote controls the behavior when Resolve locates a remote
	// repository that is not (yet) associated with an existing local
	// repository. If Remote is false (the default), then a NotFound
	// error is returned in that case. If Remote is true, then no
	// error is returned; the RepoResolution's Repo field will be
	// empty, but some metadata about the remote repository may be
	// provided.
	bool remote = 2;
}

// RepoResolution is the result of resolving a repo using
// Repos.Resolve.
message RepoResolution {
	// ID is the ID of the local repo (either a locally hosted repo,
	// or a locally added mirror).
	int32 Repo = 1;

	// CanonicalPath is the canonical repo path of the local repo
	// (with the canonical casing, etc.). Clients should generally
	// redirect the user to the canonical repo path if users access a
	// repo by a non-canonical path.
	string CanonicalPath = 3;

	// RemoteRepo holds metadata about the repo that exists on a
	// remote service (such as GitHub).
	RemoteRepo RemoteRepo = 2;
}

// ReposListRemoteOptions specifies options for Repos.ListRemote.
message ReposListRemoteOptions {
	ListOptions ListOptions = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
	// Type of repositories to list.  Possible values are currently ones
	// supported by the GitHub API, including: all, owner, public,
	// private, member. Default is "all".
	string Type = 2;
}

// RemoteRepoList is a list of remote repos.
message RemoteRepoList {
	repeated RemoteRepo RemoteRepos = 1;
}

// SrclibDataVersion specifies a srclib store version.
message SrclibDataVersion {
	string CommitID = 1;
	int32 CommitsBehind = 2;
}

message RepoConfigureAppOp {
	// Repo is the repository whose applications are being configured.
	int32 Repo = 1;

	// App is the app ID to enable or disable.
	string App = 2;

	// Enable is true if the app should be enabled and false if it
	// should be disabled.
	bool Enable = 3;
}

message ReposCreateOp {
	message NewRepo {
		// URI is the desired URI of the new repository.
		string URI = 1;

		// CloneURL is the clone URL of the repository for mirrored
		// repositories. If blank, a new hosted repository is created
		// (i.e., a repo whose origin is on the server). If Mirror is
		// true, a clone URL must be provided.
		string CloneURL = 3;

		// DefaultBranch is the repository's default Git branch.
		string DefaultBranch = 4;

		// Mirror is a boolean value indicating whether the newly created
		// repository should be a mirror. Mirror repositories are
		// periodically updated to track their upstream (which is
		// specified using the CloneURL field of this message).
		bool Mirror = 5;

		// Description is the description of the repository.
		string Description = 6;

		// Language is the primary programming language of the repository.
		string Language = 7;
	}

	oneof Op {
		NewRepo New = 1;

		// FromGitHubID creates a new repo that mirrors a repo hosted
		// on GitHub.com.
		//
		// DEPRECATED: Use Origin instead.
		int32 FromGitHubID = 2 [deprecated=true];

		// Origin creates a new repo mirrored from an external
		// service.
		//
		// The Origin's APIBaseURL can be either a blank string (for
		// default API endpoint for the service), or the an actual API
		// endpoint URL.
		Origin Origin = 3;
	}
}

// ReposUpdateOp is an operation to update a repository's metadata.
message ReposUpdateOp {
	// Repo is the repository to update.
	int32 Repo = 1;

	// Description is the new description of the repository. If empty,
	// the description is not changed.
	string Description = 2;

	// Language is the new primary programming language of the
	// repository. If empty, the language is not changed.
	string Language = 3;

	// DefaultBranch is the repo's new default branch.
	string DefaultBranch = 6;

	enum BoolType {
		NONE = 0;
		TRUE = 1;
		FALSE = 2;
	}

	// Fork is whether this repository is a fork.
	BoolType Fork = 7;

	// Private is whether this repository is private.
	BoolType Private = 8;
};

message ReposListCommitsOp {
	int32 Repo = 1;
	RepoListCommitsOptions Opt = 2;
}

message RepoListCommitsOptions {
	string Head = 1 [(gogoproto.moretags) = "url:\",omitempty\""];
	string Base = 2 [(gogoproto.moretags) = "url:\",omitempty\""];
	ListOptions ListOptions = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
	string Path = 4 [(gogoproto.moretags) = "url:\",omitempty\""];
}

message CommitList {
	repeated vcs.Commit Commits = 1;
	StreamResponse StreamResponse = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message ReposListBranchesOp {
	int32 Repo = 1;
	RepoListBranchesOptions Opt = 2;
}

message RepoListBranchesOptions {
	bool IncludeCommit = 4;
	string BehindAheadBranch = 5;
	string ContainsCommit = 6;
	ListOptions ListOptions = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message BranchList {
	repeated vcs.Branch Branches = 1;
	StreamResponse StreamResponse = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message ReposListTagsOp {
	int32 Repo = 1;
	RepoListTagsOptions Opt = 2;
}

message ReposListCommittersOp {
	int32 Repo = 1;
	RepoListCommittersOptions Opt = 2;
}

message RepoListCommittersOptions {
	string Rev = 1;
	ListOptions ListOptions = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message CommitterList {
	repeated vcs.Committer Committers = 1;
	StreamResponse StreamResponse = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message RepoListTagsOptions {
	ListOptions ListOptions = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message TagList {
	repeated vcs.Tag Tags = 1;
	StreamResponse StreamResponse = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message MirrorReposRefreshVCSOp {
	reserved 2;

	int32 Repo = 1;

	// AsUser is the user whose auth token will be used for refreshing this
	// mirror repo. This can be used when refreshing a private repo mirror.
	UserSpec AsUser = 3;
}

// VCSCredentials for authentication during communication with VCS remotes.
message VCSCredentials {
	// Pass is the password provided to the VCS.
	string Pass = 1;
}

// RemoteRepo is a repo canonically stored on an external host, and
// possibly mirrored on the local instance.
message RemoteRepo {
	// GitHubID is the repo's GitHub repository ID.
	int32 GitHubID = 1;

	// Owner is the login or org name of the repo's owner ("foo" in
	// github.com/foo/bar).
	string Owner = 2;

	// OwnerIsOrg is true if the repo's owner is an org (not a user).
	bool OwnerIsOrg = 15;

	// Name is the repo's name ("bar" in github.com/foo/bar).
	string Name = 3;

	// VCS is "git".
	string VCS = 4;

	// CloneURL is the repo's HTTP (preferably HTTPS) clone URL.
	string HTTPCloneURL = 5;

	// DefaultBranch is the default Git branch for the repo.
	string DefaultBranch = 6;

	// Description is the repo's description from GitHub.
	string Description = 7;

	// Language is the repo's primary programming language, as
	// reported by GitHub.
	string Language = 8;

	// UpdatedAt is the date of the most recent update (push or
	// metadata edit) to the repo on GitHub.
	pbtypes.Timestamp UpdatedAt = 9;

	// PushedAt is the date of the most recent git push to the repo.
	pbtypes.Timestamp PushedAt = 14;

	// Private is true for private repos.
	bool Private = 10;

	// Fork is true for repos that were forked from another repo using
	// GitHub's "fork" operation.
	bool Fork = 11;

	// Mirror is true for mirror repos (e.g., Apache Foundation
	// open-source repo mirrors on GitHub.com).
	bool Mirror = 12;

	// Stars is the number of stargazers of the GitHub repo.
	int32 Stars = 13;
}

// MirrorRepos handles operations related to maintaining mirrors on
// Sourcegraph of repositories hosted elsewhere.
service MirrorRepos {
	// Refresh fetches the newest VCS data from the repo's origin.
	rpc RefreshVCS(MirrorReposRefreshVCSOp) returns (pbtypes.Void);
}

// A Build represents a scheduled, completed, or failed repository analysis and
// import job.
//
// A build is composed of many tasks. The worker that is responsible for a build or
// task determines whether a task failure causes the whole build to fail. (Keep
// reading to see how we determine who is responsible for a build or task.) There
// is no single kind of worker; currently there are 2 things that could be
// considered workers because they build builds or perform tasks: the builders on
// Sourcegraph.com, and anyone who runs `src push` locally.
//
// Each task has logs associated with it, and each task can be associated with a
// single source unit (or not).
//
// Builds have a Queue bool field. If a process creates a build that
// has Queue=true, that means that it relinquishes responsibility for
// it; some other queue workers (on the server, for example) will
// dequeue and complete it. If Queue=false, then the process that
// created it is responsible for completing it. The only exception to
// this is that after a certain timeout (on the order of 45 minutes),
// started but unfinished builds are marked as failed.
//
// Builds and tasks are simple "build"ing blocks (no pun intended) with simple
// behavior. As we encounter new requirements for the build system, they may
// evolve.
message Build {
	// Repo is the repository this build is for.
	int32 Repo = 1;

	// ID is the numeric ID of the build. It is up to the
	// implementation to decide whether it is sequential within the
	// repo or globally unique across all repos.
	uint64 ID = 2;

	// CommitID is the full resolved commit ID to build.
	string CommitID = 3;

	// Branch, if set, is the name of the VCS branch on which this
	// commit was built. Commits may be configured to be built in
	// different ways depending on the branch the build was started on
	// (e.g., a release branch may trigger additional deployment
	// actions). A single commit can exist on any number of branches.
	//
	// A build is recommended to be associated with either a branch or
	// a tag because it is not generally possible to fetch a specific
	// commit from a Git repository; you can only fetch a refspec
	// (branch, tag, etc.). During CI we want to avoid needing to
	// clone *all* branches just to find the specific commit we
	// need. If the branch or tag is specified, we can do a fetch of a
	// specific refspec; otherwise we need to fetch all branches,
	// which makes CI much slower. And Git servers do not let you
	// request a single commit (although this is changing; see
	// http://stackoverflow.com/a/30701724, but it is still disabled
	// by default for apparently good reasons).
	string Branch = 14;

	// Tag, if set, is the name of the VCS tag associated with this
	// commit. See Branch for more information. A single commit can
	// have any number of tags.
	string Tag = 15;

	pbtypes.Timestamp CreatedAt = 4 [(gogoproto.nullable) = false];
	pbtypes.Timestamp StartedAt = 5;
	pbtypes.Timestamp EndedAt = 6;
	pbtypes.Timestamp HeartbeatAt = 7;
	bool Success = 8;
	bool Failure = 9;

	// Killed is true if this build's worker didn't exit on its own accord. It is
	// generally set when no heartbeat has been received within a certain interval. If
	// Killed is true, then Failure must also always be set to true. Unqueued builds
	// are never killed for lack of a heartbeat.
	bool Killed = 10;

	// Host is the hostname of the machine that is working on this build.
	string Host = 11;

	bool Purged = 12;
	BuildConfig BuildConfig = 13 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// BuildConfig configures a repository build.
message BuildConfig {
	// Queue is whether this build should be enqueued. If enqueued, any worker may
	// begin running this build. If not enqueued, it is up to the client to run the
	// build and update it accordingly.
	bool Queue = 2;

	// Priority of the build in the queue (higher numbers mean the build is dequeued
	// sooner).
	int32 Priority = 4;

	// BuilderConfig is the actual .sg-drone.yml config file that was
	// used to run this build in CI. It reflects all automatic
	// additions/changes made by the worker (i.e., it is not
	// necessarily the same .sg-drone.yml config file as the one in the
	// repository).
	string BuilderConfig = 16;
}

message BuildJob {
	// Spec is the BuildSpec of the referenced build.
	BuildSpec Spec = 1 [(gogoproto.nullable) = false];

	// CommitID is the full resolved commit ID to build.
	string CommitID = 3;

	// Branch, if set, is the name of the VCS branch on which this
	// commit was built. See Build.Branch.
	string Branch = 14;

	// Tag, if set, is the name of the VCS tag associated with this
	// commit. See Branch for more information. A single commit can
	// have any number of tags.
	string Tag = 15;

	// AccessToken is a token that has write access to the repository being built.
	string AccessToken = 16;
}

// BuildGetLogOptions specifies options for build log API methods.
message BuildGetLogOptions {
	// MinID indicates that only log entries whose monotonically increasing ID is
	// greater than MinID should be returned.
	//
	// To "tail -f" or watch a log for updates, set each subsequent request's MinID to
	// the MaxID of the previous request.
	string MinID = 1;
}

message BuildListOptions {
	bool Queued = 1 [(gogoproto.moretags) = "url:\",omitempty\""];
	bool Active = 2 [(gogoproto.moretags) = "url:\",omitempty\""];
	bool Ended = 3 [(gogoproto.moretags) = "url:\",omitempty\""];
	bool Succeeded = 4 [(gogoproto.moretags) = "url:\",omitempty\""];
	bool Failed = 5 [(gogoproto.moretags) = "url:\",omitempty\""];
	bool Purged = 6 [(gogoproto.moretags) = "url:\",omitempty\""];
	int32 Repo = 7 [(gogoproto.moretags) = "url:\",omitempty\""];
	string CommitID = 8 [(gogoproto.moretags) = "url:\",omitempty\""];
	string Sort = 9 [(gogoproto.moretags) = "url:\",omitempty\""];
	string Direction = 10 [(gogoproto.moretags) = "url:\",omitempty\""];
	ListOptions ListOptions = 11 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// A BuildSpec uniquely identifies a build.
message BuildSpec {
	// Repo is the repository associated with the build.
	int32 Repo = 1;

	// ID is the numeric ID of the build. It is up to the
	// implementation to decide whether it is sequential within the
	// repo or globally unique across all repos' builds.
	uint64 ID = 2;
}

// A BuildTask represents an individual step of a build.
//
// See the documentation for Build for more information about how builds and tasks
// relate to each other.
message BuildTask {
	// ID is the numeric ID of the task. It is up to the
	// implementation to decide whether it is sequential within the
	// build or globally unique across all builds.
	uint64 ID = 1;

	// Build specifies the build associated with this task.
	BuildSpec Build = 2 [(gogoproto.nullable) = false];

	// ParentID, if non-zero, indicates that this task's parent is the
	// task (in the same build) with the given ID. A ParentID of zero
	// means that this is a top-level task.
	uint64 ParentID = 3;

	// Label describes the task (e.g., "Go build").
	string Label = 4;

	// CreatedAt is when this task was initially created.
	pbtypes.Timestamp CreatedAt = 5 [(gogoproto.nullable) = false];

	// StartedAt is when this task's execution began.
	pbtypes.Timestamp StartedAt = 6;

	// EndedAt is when this task's execution ended (whether because it succeeded or
	// failed).
	pbtypes.Timestamp EndedAt = 7;

	// Success is whether this task's execution succeeded.
	bool Success = 8;

	// Failure is whether this task's execution failed.
	bool Failure = 9;

	// Skipped is whether this task's execution was skipped.
	bool Skipped = 10;

	// Warnings is whether this task produced warnings. Tasks with
	// warnings are not displayed as "green". The warnings are
	// contained in the task logs.
	bool Warnings = 11;
}

message BuildTaskListOptions {
	ListOptions ListOptions = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// A BuildUpdate contains updated information to update on an existing build.
message BuildUpdate {
	pbtypes.Timestamp StartedAt = 1;
	pbtypes.Timestamp EndedAt = 2;
	pbtypes.Timestamp HeartbeatAt = 3;
	string Host = 4;
	bool Success = 5;
	bool Purged = 6;
	bool Failure = 7;
	bool Killed = 8;
	int32 Priority = 9;
	string BuilderConfig = 10;
	float FileScore = 11;
	float RefScore = 12;
	float TokDensity = 13;
}

message BuildList {
	repeated Build Builds = 1;
	StreamResponse StreamResponse = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message BuildsCreateOp {
	int32 Repo = 1;

	// CommitID is the full commit ID of the commit to build. It is
	// required.
	string CommitID = 2;

	// Branch, if specified, indicates that this build's commit is on
	// the given branch. If Branch is set, Tag must be empty.
	string Branch = 3;

	// Tag, if specified, indicates that this build's commit has the
	// given tag. If Tag is set, Branch must be empty.
	string Tag = 4;

	BuildConfig Config = 5 [(gogoproto.nullable) = false];
}

message BuildsUpdateOp {
	BuildSpec Build = 1 [(gogoproto.nullable) = false];
	BuildUpdate Info = 2 [(gogoproto.nullable) = false];
}

message BuildsListBuildTasksOp {
	BuildSpec Build = 1 [(gogoproto.nullable) = false];
	BuildTaskListOptions Opt = 2;
}

message BuildTaskList {
	repeated BuildTask BuildTasks = 1;
}

message BuildsCreateTasksOp {
	BuildSpec Build = 1 [(gogoproto.nullable) = false];
	repeated BuildTask Tasks = 2;
}

message BuildsUpdateTaskOp {
	TaskSpec Task = 1 [(gogoproto.nullable) = false];
	TaskUpdate Info = 2 [(gogoproto.nullable) = false];
}

message BuildsGetTaskLogOp {
	TaskSpec Task = 1 [(gogoproto.nullable) = false];
	BuildGetLogOptions Opt = 2;
}

message BuildsDequeueNextOp {
}

// EmailAddr is an email address associated with a user.
message EmailAddr {
	// the email address (case-insensitively compared in the DB and API)
	string Email = 1;

	// whether this email address has been verified
	bool Verified = 2;

	// indicates this is the user's primary email (only 1 email can be primary per user)
	bool Primary = 3;

	// whether Sourcegraph inferred via public data that this is an email for the user
	bool Guessed = 4;

	// indicates that this email should not be associated with the user (even if guessed in the future)
	bool Blacklisted = 5;
}

message LogEntries {
	string MaxID = 1;
	repeated string Entries = 2;
}

message Org {
	User User = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message OrgListMembersOptions {
	ListOptions ListOptions = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// OrgSpec specifies an organization. At least one of Email, Login, and UID must be
// nonempty.
message OrgSpec {
	string Org = 1;
	int32 UID = 2;
}

message OrgsListMembersOp {
	OrgSpec Org = 1 [(gogoproto.nullable) = false];
	OrgListMembersOptions Opt = 2;
}

message UserList {
	repeated User Users = 1;
}

// A Person represents either a registered user or a committer to a repository
// (typically when their commit email can't be resolved to a user).
message Person {
	// PersonSpec is an identifier for the person. If the person was resolved to a
	// user, then both Login and UID are set. Otherwise only Email is set, and it may
	// be obfuscated (to protect privacy).
	PersonSpec PersonSpec = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];

	// FullName is the (possibly empty) full name of the person.
	string FullName = 2;

	// AvatarURL is the URL to the user's avatar image.
	string AvatarURL = 3;
}

// PersonSpec specifies a person. At least one of Email, Login, and UID must be
// nonempty.
message PersonSpec {
	// Email is a person's email address. It may be obfuscated (to protect privacy).
	string Email = 1;

	// Login is a user's login.
	string Login = 2;

	// UID is a user's UID.
	int32 UID = 3;
}

message TaskSpec {
	BuildSpec Build = 1 [(gogoproto.nullable) = false];
	uint64 ID = 2;
}

// A TaskUpdate contains updated information to update on an existing task.
message TaskUpdate {
	pbtypes.Timestamp StartedAt = 1;
	pbtypes.Timestamp EndedAt = 2;
	bool Success = 3;
	bool Failure = 4;
	bool Skipped = 5;
	bool Warnings = 6;
}

// User represents a registered user.
message User {
	// UID is the numeric primary key for a user.
	int32 UID = 1;

	// Login is the user's username.
	string Login = 2;

	// Name is the (possibly empty) full name of the user.
	string Name = 4;

	// IsOrganization is whether this user represents an organization.
	bool IsOrganization = 5;

	// AvatarURL is the URL to an avatar image specified by the user.
	string AvatarURL = 6;

	// Location is the user's physical location.
	string Location = 7;

	// Company is the user's company.
	string Company = 8;

	// HomepageURL is the user's homepage or blog URL.
	string HomepageURL = 9;

	// Disabled is whether the user account is disabled.
	bool Disabled = 10;

	// Admin is whether the user is a site admin for the site.
	bool Admin = 12;

	// Write is whether the user has write access for the site.
	bool Write = 13;

	// RegisteredAt is the date that the user registered. If the user has not
	// registered (i.e., we have processed their repos but they haven't signed into
	// Sourcegraph), it is null.
	pbtypes.Timestamp RegisteredAt = 11;
}

// UserSpec specifies a user. At least one of Login and UID must be
// nonempty.
message UserSpec {
	// Login is a user's login.
	string Login = 1;

	// UID is a user's UID.
	int32 UID = 2;
}

// UsersListOptions specifies options for the UsersService.List method.
message UsersListOptions {
	// Query filters the results to only those whose logins match. The search algorithm
	// is an implementation detail (currently it is a prefix match).
	string Query = 1 [(gogoproto.moretags) = "url:\",omitempty\""];

	string Sort = 2 [(gogoproto.moretags) = "url:\",omitempty\""];
	string Direction = 3 [(gogoproto.moretags) = "url:\",omitempty\""];
	ListOptions ListOptions = 4 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];

	// UIDs filters the resulting list to only contain users
	// with one of these UIDs.
	repeated int32 UIDs = 5 [(gogoproto.moretags) = "url:\",omitempty\""];
}

message OrgsListOp {
	UserSpec Member = 1 [(gogoproto.nullable) = false];
	ListOptions ListOptions = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message EmailAddrList {
	repeated EmailAddr EmailAddrs = 1;
}

message OrgList {
	repeated Org Orgs = 1;
}


// BuildsService communicates with the build-related endpoints in the Sourcegraph
// API.
service Builds {
	// Get fetches a build.
	rpc Get(BuildSpec) returns (Build);

	// List builds.
	rpc List(BuildListOptions) returns (BuildList);

	// Create a new build. The build will run asynchronously (Create does not wait for
	// it to return. To monitor the build's status, use Get.)
	rpc Create(BuildsCreateOp) returns (Build);

	// Update updates information about a build and returns the build after the update
	// has been applied.
	rpc Update(BuildsUpdateOp) returns (Build);

	// ListBuildTasks lists the tasks associated with a build.
	rpc ListBuildTasks(BuildsListBuildTasksOp) returns (BuildTaskList);

	// CreateTasks creates tasks associated with a build and returns them with their
	// TID fields set.
	rpc CreateTasks(BuildsCreateTasksOp) returns (BuildTaskList);

	// UpdateTask updates a task associated with a build.
	rpc UpdateTask(BuildsUpdateTaskOp) returns (BuildTask);

	// GetTaskLog gets log entries associated with a task.
	rpc GetTaskLog(BuildsGetTaskLogOp) returns (LogEntries);

	// DequeueNext returns the next queued build and marks it as
	// having started (atomically). If there are no builds in the
	// queue, a NotFound error is returned.
	rpc DequeueNext(BuildsDequeueNextOp) returns (BuildJob);
}

// OrgsService communicates with the organizations-related endpoints in the
// Sourcegraph API.
service Orgs {
	// Get fetches an organization.
	rpc Get(OrgSpec) returns (Org);

	// List lists organizations that a user is a member of.
	rpc List(OrgsListOp) returns (OrgList);

	// ListMembers lists members of an organization.
	rpc ListMembers(OrgsListMembersOp) returns (UserList);
}

// PeopleService communicates with the people-related endpoints in the Sourcegraph
// API.
service People {
	// Get gets a person. If an email is provided and it resolves to a registered user,
	// information about that user is returned. Otherwise a transient person is created
	// and returned.
	rpc Get(PersonSpec) returns (Person);
}

// Accounts communicates with the account-related endpoints in the
// Sourcegraph API.
//
// For each account, there is also a corresponding user, but there is
// not an account for every user. This is because users may represent
// accounts on external services that Sourcegraph doesn't manage (and
// can't create/update information about).
service Accounts {
	// Create creates a new user account.
	rpc Create(NewAccount) returns (CreatedAccount);

	// RequestPasswordReset stores a password reset token in the database, to
	// later verify the authenticity of a user using CheckResetToken
	rpc RequestPasswordReset(PersonSpec) returns (PendingPasswordReset);

	// CheckResetToken verifies a password reset token is authentic and valid
	rpc ResetPassword(NewPassword) returns (pbtypes.Void);

	// Update profile of existing account.
	rpc Update(User) returns (pbtypes.Void);

	// Delete deletes a user account from this server.
	rpc Delete(PersonSpec) returns (pbtypes.Void);
}

// CreatedAccount is a newly created account.
message CreatedAccount {
	int32 UID = 1;

	// TemporaryAccessToken is a temporary access token that grants
	// full access to this account. It can be used by the caller of
	// Accounts.Create to perform any immediate setup necessary on the
	// account (e.g., linking GitHub tokens) without needing to
	// create/generate a password for the account (which otherwise
	// would be the only way, via the resource owner password grant
	// type, to get an access token).
	string TemporaryAccessToken = 2;
}

message PasswordResetToken {
	// token is the hard to guess token that allows a user to set a new password.
	string Token = 1;
}

message PendingPasswordReset {
	// Link is the URL for resetting password using this token.
	// It is set in the response only if the request was made
	// by an admin user.
	string Link = 1;

	// Token is the hard to guess token that allows a user to
	// set a new password.
	// It is set in the response only if the request was made
	// by an admin user.
	PasswordResetToken Token = 2;

	// EmailSent is set if the password reset link was emailed to
	// the user.
	bool EmailSent = 3;

	// Login is the login name of user for whom this request is created.
	string Login = 4;
}

message NewPassword {
	// password is the new password for the user who requested the password reset
	// token.
	string Password = 1;

	PasswordResetToken Token = 2;
}

message NewAccount {
	// Login is the desired login for the new user account.
	string Login = 1;

	// Email is the primary email address for the new user account.
	string Email = 2;

	// Password is the password for the new user account. If empty,
	// the user can only log into the account via GitHub or some other
	// external auth provider (until they reset the password).
	string Password = 3;

	// UID is the desired UID for the new user account.
	int32 UID = 4;
}

// UsersService communicates with the users-related endpoints in the Sourcegraph
// API.
service Users {
	// Get fetches a user.
	rpc Get(UserSpec) returns (User);

	// GetWithEmail fetches a user by their primary email.
	rpc GetWithEmail(EmailAddr) returns (User);

	// ListEmails returns a list of a user's email addresses.
	rpc ListEmails(UserSpec) returns (EmailAddrList);

	// List users.
	rpc List(UsersListOptions) returns (UserList);
}

// Auth manages authentication and authorization (via OAuth2).
service Auth {
	// GetAccessToken requests the server to issue an access token
	// using the credentials provided in the AccessTokenRequest.
	//
	// If this call is requesting an access token for a
	// client_credentials grant (i.e., the access token would identify
	// the client, not any specific user), then the request must not
	// be authenticated. If the call is requesting an access token to
	// identify a user, the request must be authenticated using the
	// client's credentials.
	//
	// If the credentials are invalid, grpc.PermissionDenied is
	// returned.
	rpc GetAccessToken(AccessTokenRequest) returns (AccessTokenResponse);

	// Identify describes the currently authenticated user and/or
	// client (if any). It is akin to "whoami".
	rpc Identify(pbtypes.Void) returns (AuthInfo);

	// GetExternalToken returns a stored token that authorizes this server
	// to an external service on behalf of the user.
	rpc GetExternalToken(ExternalTokenSpec) returns (ExternalToken);

	// SetExternalToken stores a token that authorizes this server
	// to an external service on behalf of the user.
	rpc SetExternalToken(ExternalToken) returns (pbtypes.Void);

	// DeleteAndRevokeExternalToken deletes the specified token from
	// Sourcegraph and revokes/disables the token on the external host
	// (e.g., for GitHub, it hits the "revoke an authorizations for an
	// application" API endpoint).
	rpc DeleteAndRevokeExternalToken(ExternalTokenSpec) returns (pbtypes.Void);
}

// LoginCredentials is the information a user submits to log in.
message LoginCredentials {
	// Login is the user's claimed login.
	string Login = 1;

	// Password is the password (possibly) corresponding to the login.
	string Password = 2;
}

// GitHubAuthCode is a custom authorization grant type we support.
// It lets you log into Sourcegraph by presenting a valid GitHub
// authorization code for the same user.
message GitHubAuthCode {
	// Code is the GitHub OAuth2 authorization code returned from
	// GitHub.
	string Code = 1;

	// Host is always "github.com" for now, but can be used in the
	// future to support GitHub Enterprises located at different URLs.
	string Host = 2;
}

// AccessTokenRequest contains the information necessary to
// request an OAuth2 access token. It supports a subset of
// authorization grant types specified in
// http://tools.ietf.org/html/rfc6749#section-4.
message AccessTokenRequest {
	// See http://tools.ietf.org/html/rfc6749#section-1.3 for more
	// information on OAuth2 authorization grant types.
	oneof authorization_grant {
		LoginCredentials ResourceOwnerPassword = 2;
		GitHubAuthCode GitHubAuthCode = 3;
	}

	repeated string Scope = 17;
}

// AccessTokenResponse is a successful access token response. See
// http://tools.ietf.org/html/rfc6749#section-5.1 for more
// information.
message AccessTokenResponse {
	string AccessToken = 1;
	string TokenType = 2;
	int32 ExpiresInSec = 3; // optional
	string RefreshToken = 4; // optional
	repeated string Scope = 5; // optional if equal to the requested scope

	// Extra fields only used by Sourcegraph.
	int32 UID = 6; // the Sourcegraph UID of the user corresponding to the auth'd GitHubAuthCode's user
	string GitHubAccessToken = 7; // the GitHub access token obtained by exchanging the GitHubAuthCode
	GitHubUser GitHubUser = 8; // the authenticated GitHub user for the GitHubAuthCode
}

// GitHubUser represents a GitHub user.
message GitHubUser {
	int32 ID = 1; // user ID
	string Login = 2;
	string Name = 3;
	string Email = 4;
	string Location = 5;
	string Company = 6;
	string AvatarURL = 7;
}

// AuthInfo describes the currently authenticated client and/or user
// (if any).
message AuthInfo {
	// UID is the UID of the currently authenticated user (if any).
	int32 UID = 2;

	// Login is the login of the currently authenticated user (if any).
	string Login = 4;

	// Write is set if the user (if any) has write access on this server.
	bool Write = 5;

	// Admin is set if the user (if any) has admin access on this server.
	bool Admin = 6;

	// IntercomHash is a hash of the UID and the Intercom.io secret
	// key. See
	// https://docs.intercom.io/configuring-for-your-product-or-site/enable-secure-mode
	// for more information.
	string IntercomHash = 7;
}

// ExternalTokenSpec specifies a request for a stored auth token
// of a user for an external host.
message ExternalTokenSpec {
	// UID is the UID of the user whose token is requested.
	int32 uid = 1 [(gogoproto.customname) = "UID"];

	// Host is the external service whose token is requested.
	string host = 2;

	// ClientID is the application client ID this token was granted
	// to. The same client ID must be used when using this access
	// token.
	string client_id = 3 [(gogoproto.customname) = "ClientID"];
}

// ExternalToken specifies an auth token of a user for an external host.
message ExternalToken {
	// UID is the UID of the user authorized by the token.
	int32 uid = 1 [(gogoproto.customname) = "UID"];

	// Host is the external service which granted the token.
	string host = 2;

	// Token is the auth token authorizing a user on an external service.
	string token = 3;

	// Scope lists the permissions the token is entitled to.
	string scope = 4;

	// ClientID is the application client ID this token was granted
	// to. The same client ID must be used when using this access
	// token.
	string client_id = 5 [(gogoproto.customname) = "ClientID"];

	// ExtUID is the UID on the external service of the user corresponding
	// to this token.
	int32 ext_uid = 6 [(gogoproto.customname) = "ExtUID"];
}

// Def is a code def returned by the Sourcegraph API.
message Def {
	graph.Def Def = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
	pbtypes.HTML DocHTML = 2;
	graph.DefFormatStrings FmtStrings = 3;

	// StartLine and EndLine are populated if
	// DefGetOptions.ComputeLineRange is true.
	uint32 StartLine = 4;
	uint32 EndLine = 5;
}

// DefGetOptions specifies options for DefsService.Get.
message DefGetOptions {
	bool Doc = 1 [(gogoproto.moretags) = "url:\",omitempty\""];

	// ComputeLineRange is whether the server should compute the start
	// and end line numbers (1-indexed). This incurs additional cost,
	// so it's not always desired.
	bool ComputeLineRange = 2 [(gogoproto.moretags) = "url:\",omitempty\""];
}

// DefListOptions specifies options for DefsService.List.
message DefListOptions {
	string Name = 1 [(gogoproto.moretags) = "url:\",omitempty\""];

	// Specifies a search query for defs. If specified, then the Sort and Direction
	// options are ignored
	string Query = 2 [(gogoproto.moretags) = "url:\",omitempty\""];

	// ByteStart and ByteEnd will restrict the results to only definitions that overlap
	// with the specified start and end byte offsets. This filter is only applied if
	// both values are set.
	uint32 ByteStart = 3;

	// ByteStart and ByteEnd will restrict the results to only definitions that overlap
	// with the specified start and end byte offsets. This filter is only applied if
	// both values are set.
	uint32 ByteEnd = 4;

	// DefKeys, if set, will return the definitions that match the given DefKey
	repeated graph.DefKey DefKeys = 5;

	// RepoRevs constrains the results to a set of repository revisions (given by their
	// URIs plus an optional "@" and a revision specifier). For example,
	// "repo.com/foo@revspec".
	//
	// TODO(repo-key): Make this use repo IDs, not URIs.
	repeated string RepoRevs = 6 [(gogoproto.moretags) = "url:\",omitempty,comma\""];

	string UnitType = 7 [(gogoproto.moretags) = "url:\",omitempty\""];
	string Unit = 8 [(gogoproto.moretags) = "url:\",omitempty\""];
	string Path = 9 [(gogoproto.moretags) = "url:\",omitempty\""];

	// Files, if specified, will restrict the results to only defs defined in the
	// specified file.
	repeated string Files = 10 [(gogoproto.moretags) = "url:\",omitempty\""];

	// FilePathPrefix, if specified, will restrict the results to only defs defined in
	// files whose path is underneath the specified prefix.
	string FilePathPrefix = 11 [(gogoproto.moretags) = "url:\",omitempty\""];

	repeated string Kinds = 12 [(gogoproto.moretags) = "url:\",omitempty,comma\""];
	bool Exported = 13 [(gogoproto.moretags) = "url:\",omitempty\""];
	bool Nonlocal = 14 [(gogoproto.moretags) = "url:\",omitempty\""];

	// IncludeTest is whether the results should include definitions in test files.
	bool IncludeTest = 15 [(gogoproto.moretags) = "url:\",omitempty\""];

	// Enhancements
	bool Doc = 16 [(gogoproto.moretags) = "url:\",omitempty\""];

	bool Fuzzy = 17 [(gogoproto.moretags) = "url:\",omitempty\""];

	// Sorting
	string Sort = 18 [(gogoproto.moretags) = "url:\",omitempty\""];

	string Direction = 19 [(gogoproto.moretags) = "url:\",omitempty\""];

	// Paging
	ListOptions ListOptions = 20 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// DefListRefsOptions configures the scope of ref search for a def.
message DefListRefsOptions {
	int32 Repo = 1 [(gogoproto.moretags) = "url:\",omitempty\""];
	string CommitID = 4 [(gogoproto.moretags) = "url:\",omitempty\""];
	repeated string Files = 2 [(gogoproto.moretags) = "url:\",omitempty\""];
	ListOptions ListOptions = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// DefSpec specifies a def.
message DefSpec {
	int32 Repo = 1;
	string CommitID = 2;
	string UnitType = 3;
	string Unit = 4;
	string Path = 5;
}

message DefsGetOp {
	DefSpec Def = 1 [(gogoproto.nullable) = false];
	DefGetOptions Opt = 2;
}

message DefList {
	repeated Def Defs = 1;
	ListResponse ListResponse = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message DefsListRefsOp {
	DefSpec Def = 1 [(gogoproto.nullable) = false];
	DefListRefsOptions Opt = 2;
}

message RefList {
	repeated graph.Ref Refs = 1;
	StreamResponse StreamResponse = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// DefListRefLocationsOptions holds the options for fetching
// all locations referencing a def.
message DefListRefLocationsOptions {
	// Repos is the list of repos to restrict the results to.
	// If empty, all repos are searched for references.
	repeated string Repos = 1 [(gogoproto.moretags) = "url:\",omitempty\""];

	// ListOptions specifies options for paginating
	// the result.
	ListOptions ListOptions = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// DefListRefLocationsOptions holds the options for fetching
// all locations referencing the specified def.
message DefsListRefLocationsOp {
	// Def identifies the definition whose locations are requested.
	DefSpec Def = 1 [(gogoproto.nullable) = false];

	// Opt controls the scope of the search for ref locations of this def.
	DefListRefLocationsOptions Opt = 2;
}

// DefsListExamples holds the options for fetching
// usage examples referencing the specified def.
message DefsListExamplesOp {
	// Def identifies the definition whose examples are requested.
	DefSpec Def = 1 [(gogoproto.nullable) = false];

	// ListOptions specifies options for paginating the result.
	ListOptions ListOptions = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// RefLocationsList lists the repos and files that reference a def.
message RefLocationsList {
	// RepoRefs holds the repos and files referencing the def.
	repeated DefRepoRef RepoRefs = 1;

	// StreamResponse specifies if more results are available.
	StreamResponse StreamResponse = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];

	// TotalRepos is the total number of repos which reference the def.
	int32 TotalRepos = 3;
}

// DefRepoRef identifies a repo and its files that reference a def.
message DefRepoRef {
	// Repo is the name of repo that references the def.
	string Repo = 1;

	// Count is the number of references to the def in the repo.
	int32 Count = 2;

	// Score is the importance score of this repo for the def.
	float Score = 3;

	// Files is the list of files in this repo referencing the def.
	repeated DefFileRef Files = 4;
}

// DefFileRef identifies a file that references a def.
message DefFileRef {
	// Path is the path of this file.
	string Path = 1;

	// Count is the number of references to the def in this file.
	int32 Count = 2;

	// Score is the importance score of this file for the def.
	float Score = 3;
}

// Delta represents the difference between two commits (possibly in 2 separate
// repositories).
message Delta {
	RepoRevSpec Base = 1 [(gogoproto.nullable) = false];
	RepoRevSpec Head = 2 [(gogoproto.nullable) = false];
	vcs.Commit BaseCommit = 3;
	vcs.Commit HeadCommit = 4;
}

// FileDiff holds data about a diff, and additionally stores extended
// information about its hunks.
message FileDiff {
	diff.FileDiff FileDiff = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
	repeated diff.Hunk FileDiffHunks = 2;
	// PreImage is the CommitID at which this file was before the change occurred.
	string PreImage = 3 [(gogoproto.jsontag) = ",omitempty"];
	// PostImage is the CommitID at which this file was after the change occurred.
	string PostImage = 4 [(gogoproto.jsontag) = ",omitempty"];
	// Stat contains statistics about additions and deletions to this diff.
	diff.Stat Stats = 5 [(gogoproto.nullable) = false];

	// Filtered specifies whether or not this file diff was filtered out, and as
	// such contains no FileDiffHunks or FileDiff.Hunks.
	bool Filtered = 6 [(gogoproto.jsontag) = ",omitempty"];
}

// DeltaFiles describes files added/changed/deleted in a delta.
message DeltaFiles {
	repeated FileDiff FileDiffs = 1;
	Delta Delta = 2;
	diff.Stat Stats = 3 [(gogoproto.nullable) = false];
}

// DeltaFilter specifies criteria by which to filter results from DeltaListXxx
// methods.
message DeltaFilter {
	string Unit = 1 [(gogoproto.moretags) = "url:\",omitempty\""];
	string UnitType = 2 [(gogoproto.moretags) = "url:\",omitempty\""];
}

// DeltaListFilesOptions specifies options for ListFiles.
message DeltaListFilesOptions {
	// Filter filters the list of returned files to those whose name matches
	// Filter. There is no difference in the returned data except that the
	// returned DeltaFiles.FileDiffs will not contain any hunks and will have
	// Filtered set to true.
	string Filter = 2 [(gogoproto.moretags) = "url:\",omitempty\""];

	// Ignore specifies a list of '/'-separated path globs to omit from the
	// returned results.
	repeated string Ignore = 6  [(gogoproto.moretags) = "url:\",omitempty\""];

	DeltaFilter DeltaFilter = 5 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// A DeltaSpec specifies a delta.
message DeltaSpec {
	RepoRevSpec Base = 1 [(gogoproto.nullable) = false];
	RepoRevSpec Head = 2 [(gogoproto.nullable) = false];
}

message DeltasListFilesOp {
	DeltaSpec Ds = 1 [(gogoproto.nullable) = false];
	DeltaListFilesOptions Opt = 2;
}

// RepoTreeGetOptions specifies options for (RepoTreeService).Get.
message RepoTreeGetOptions {
	bool ContentsAsString = 4 [(gogoproto.moretags) = "url:\",omitempty\""];

	GetFileOptions GetFileOptions = 5 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// GetFileOptions specifies options for GetFileWithOptions.
message GetFileOptions {
	// line or byte range to fetch (can't set both line *and* byte range)
	FileRange FileRange = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];

	// EntireFile is whether the entire file contents should be returned. If true,
	// Start/EndLine and Start/EndBytes are ignored.
	bool EntireFile = 2 [(gogoproto.moretags) = "url:\",omitempty\""];

	// ExpandContextLines is how many lines of additional output context to include (if
	// Start/EndLine and Start/EndBytes are specified). For example, specifying 2 will
	// expand the range to include 2 full lines before the beginning and 2 full lines
	// after the end of the range specified by Start/EndLine and Start/EndBytes.
	int32 ExpandContextLines = 3 [(gogoproto.moretags) = "url:\",omitempty\""];

	// FullLines is whether a range that includes partial lines should be extended to
	// the nearest line boundaries on both sides. It is only valid if StartByte and
	// EndByte are specified.
	bool FullLines = 4 [(gogoproto.moretags) = "url:\",omitempty\""];

	// Recursive only applies if the returned entry is a directory. It will
	// return the full file tree of the host repository, recursing into all
	// sub-directories.
	bool Recursive = 5 [(gogoproto.moretags) = "url:\",omitempty\""];

	// RecurseSingleSubfolderLimit only applies if the returned entry is a directory.
	// If nonzero, it will recursively find and include all singleton sub-directory chains,
	// up to a limit of RecurseSingleSubfolderLimit.
	int32 RecurseSingleSubfolderLimit = 6 [(gogoproto.moretags) = "url:\",omitempty\""];
}

message RepoTreeSearchOptions {
	vcs.SearchOptions SearchOptions = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

// A RepoTreeSearchResult is a tree search result that includes the repo and rev it
// came from.
message RepoTreeSearchResult {
	vcs.SearchResult SearchResult = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
	RepoRevSpec RepoRev = 2 [(gogoproto.nullable) = false];
}

message RepoTreeGetOp {
	TreeEntrySpec Entry = 1 [(gogoproto.nullable) = false];
	RepoTreeGetOptions Opt = 2;
}

message RepoTreeSearchOp {
	RepoRevSpec Rev = 1 [(gogoproto.nullable) = false];
	RepoTreeSearchOptions Opt = 2;
}

message RepoTreeListOp {
	RepoRevSpec Rev = 1 [(gogoproto.nullable) = false];
}

message RepoTreeListResult {
	repeated string Files = 1;
}

message VCSSearchResultList {
	repeated vcs.SearchResult SearchResults = 1;
	ListResponse ListResponse = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}


// TreeEntry is a file or directory in a repository.
message TreeEntry {
	BasicTreeEntry BasicTreeEntry = 1 [(gogoproto.embed) = true, (gogoproto.jsontag) = ""];
	FileRange FileRange = 2 [(gogoproto.embed) = true, (gogoproto.jsontag) = ""];
	string ContentsString = 3;
}

message BasicTreeEntry {
	string Name = 1;
	TreeEntryType Type = 2;
	string CommitID = 3; // the absolute commit ID of this file
	bytes Contents = 5;
	repeated BasicTreeEntry Entries = 6;
}

enum TreeEntryType {
	option (gogoproto.goproto_enum_prefix) = false;
	FileEntry = 0;
	DirEntry = 1;
	SymlinkEntry = 2;
	SubmoduleEntry = 3;
}

message TreeEntrySpec {
	RepoRevSpec RepoRev = 1 [(gogoproto.nullable) = false];
	string Path = 2;
}

// FileRange is a line and byte range in a file.
message FileRange {
	// start of line range
	int64 StartLine = 1 [(gogoproto.moretags) = "url:\",omitempty\""];

	// end of line range
	int64 EndLine = 2 [(gogoproto.moretags) = "url:\",omitempty\""];

	// start of byte range
	int64 StartByte = 3 [(gogoproto.moretags) = "url:\",omitempty\""];

	// end of byte range
	int64 EndByte = 4 [(gogoproto.moretags) = "url:\",omitempty\""];
}

message DefsRefreshIndexOp {
	// Repo is the repo whose graph data is to be re-indexed
	// for global ref locations.
	int32 Repo = 1;

	// RefreshRefLocations refreshes the global ref locations index for
	// the specified repository.
	bool RefreshRefLocations = 2;

	// Force ensures we reindex, even if we have already indexed the latest
	// commit for repo
	bool Force = 3;

	// CommitID is the commit for which defs should be synced from srclib-store to DB.
	string CommitID = 4;
}

// DefsService communicates with the def- and graph-related endpoints in the
// Sourcegraph API.
service Defs {
	// Get fetches a def.
	rpc Get(DefsGetOp) returns (Def);

	// List defs.
	rpc List(DefListOptions) returns (DefList);

	// ListRefs lists references to def.
	rpc ListRefs(DefsListRefsOp) returns (RefList);

	// ListRefLocations lists repos and files that refer to def.
	rpc ListRefLocations(DefsListRefLocationsOp) returns (RefLocationsList);

	// ListExamples lists usage examples for a given def.
	rpc ListExamples(DefsListExamplesOp) returns (RefLocationsList);

	// ListAuthors lists people who committed parts of def's definition.
	rpc ListAuthors(DefsListAuthorsOp) returns (DefAuthorList);

	// RefreshIndex updates the precomputed indexes used for answering
	// ListRefLocations queries. The indexes are built from the current
	// snapshot of the code graph. This operation is idempotent, and
	// should be executed regularly to keep the indexes up-to-date.
	rpc RefreshIndex(DefsRefreshIndexOp) returns (pbtypes.Void);
}

message AsyncRefreshIndexesOp {
	// Repo will have all of its indexes refreshed.
	int32 Repo = 1;

	// Source helps tie back async jobs to their source.
	string Source = 2;

	// Force will ensure all indexes are refreshed, even if the index
	// already includes the latest commit.
	bool Force = 3;
}

// AsyncService provides services which are usually triggered by frontend
// actions, but do not block responses
service Async {
	// RefreshIndexes refreshes indexes we keep on a repo (GlobalRefs,
	// Defs, etc)
	rpc RefreshIndexes(AsyncRefreshIndexesOp) returns (pbtypes.Void);
}

message AuthorshipInfo {
	pbtypes.Timestamp LastCommitDate = 1 [(gogoproto.nullable) = false];

	// LastCommitID is the commit ID of the last commit that this author made to the
	// thing that this info describes.
	string LastCommitID = 2;
}

message DefAuthor {
	// Email is the author's email. It may be obfuscated or truncated
	// to prevent spam.
	string Email = 1;

	// AvatarURL is the URL to the author's avatar image, if any.
	string AvatarURL = 2;

	// DefAuthorship contains statistics about the author's contributions
	// to the def.
	DefAuthorship DefAuthorship = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message DefAuthorship {
	AuthorshipInfo AuthorshipInfo = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];

	int32 Bytes = 3;
	double BytesProportion = 4;
}

// DefListAuthorsOptions specifies options for DefsService.ListAuthors.
message DefListAuthorsOptions {
	ListOptions ListOptions = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];
}

message DefsListAuthorsOp {
	DefSpec Def = 1 [(gogoproto.nullable) = false];
	DefListAuthorsOptions Opt = 2;
}

message DefAuthorList {
	repeated DefAuthor DefAuthors = 1;
}

// DeltasService interacts with the delta-related endpoints of the Sourcegraph API.
// A delta is all of the changes between two commits.
service Deltas {
	// Get fetches a summary of a delta.
	rpc Get(DeltaSpec) returns (Delta);

	// ListFiles fetches the file diff for a delta.
	rpc ListFiles(DeltasListFilesOp) returns (DeltaFiles);
}

// RepoTreeService communicates with the Sourcegraph API endpoints that fetch file
// and directory entries in repositories.
service RepoTree {
	rpc Get(RepoTreeGetOp) returns (TreeEntry);

	rpc Search(RepoTreeSearchOp) returns (VCSSearchResultList);

	// List returns a list of all the files in the repo tree at
	// the given revision.
	rpc List(RepoTreeListOp) returns (RepoTreeListResult);
}

message Checklist {
	// number of tasks to be done (unchecked)
	int32 Todo = 1;

	// number of tasks that are done (checked)
	int32 Done = 2;
}

message FileToken {
	string Path = 1;
	BasicTreeEntry Entry = 2;
}
// Meta provides meta-information about Sourcegraph.
service Meta {
	// Status returns status information from the server's point of
	// view.
	rpc Status(pbtypes.Void) returns (ServerStatus);

	// Config returns the server's configuration.
	rpc Config(pbtypes.Void) returns (ServerConfig);
}

// ServerStatus describes the server's status.
message ServerStatus {
	// Info contains arbitrary human-readable status information about
	// the server.
	string Info = 1;
}

// ServerConfig describes the server's configuration.
//
// DEV NOTE: There is some overlap with Go CLI flag structs. In the
// future we may consolidate these.
message ServerConfig {
	// Version is the version of Sourcegraph that this server is
	// running.
	string Version = 1;

	// AppURL is the base URL of the user-facing web application
	// (e.g., "https://sourcegraph.com").
	string AppURL = 2;

	// IDKey is the server's identity key (ID key).
	string IDKey = 7;
}

// UserEvent encodes any user initiated event on the local instance.
message UserEvent {
	string Type = 1;

	int32 UID = 2;

	string ClientID = 3;

	string Service = 4;

	string Method = 5;

	string Result = 6;

	// CreatedAt holds the time when this event was logged.
	pbtypes.Timestamp CreatedAt = 7;

	string Message = 8;

	// Version holds the release version of the Sourcegraph binary.
	string Version = 9;

	// URL holds the http request url.
	string URL = 10;
}

// Event is any action logged on a Sourcegraph instance.
message Event {
	// Type specifies the action type, eg. "AccountCreate" or "AddRepo".
	string Type = 1;

	// UserID is the unique identifier of a user on a Sourcegraph instance.
	// It is constructed as "login@short-client-id", where short-client-id
	// is the first 6 characters of this sourcegraph instance's public key
	// fingerprint (i.e. it's ClientID).
	string UserID = 2;

	// DeviceID is the unique identifier of an anonymous user on a Sourcegraph
	// instance.
	string DeviceID = 3;

	// ClientID is this Sourcegraph instance's public key fingerprint.
	string ClientID = 4;

	// Timestamp records the instant when this event was logged.
	pbtypes.Timestamp Timestamp = 5;

	// UserProperties holds metadata relating to user who performed this
	// action, eg. "Email".
	map<string, string> UserProperties = 6;

	// EventProperties holds metadata relating to the action logged by
	// this event, eg. for "AddRepo" event, a property is "Source" which
	// specifies if the repo is local or mirrored.
	map<string, string> EventProperties = 7;
}

// EventList is a list of logged Sourcegraph events.
message EventList {
	// Events holds the list of events.
	repeated Event Events = 1;

	// Version holds the release version of the Sourcegraph binary.
	string Version = 2;

	// AppURL holds the base URL of the Sourcegraph app.
	string AppURL = 3;
}

// NotifyGenericEvent describes an action being done against an object. For
// example, pushing a branch.
message NotifyGenericEvent {
	// Actor is the User who did the action
	UserSpec Actor = 1;

	// Recipients is who should be notified of the action
	repeated UserSpec Recipients = 2;

	// ActionType example: "pushed"
	string ActionType = 3;

	// ActionContent example: "37 commits"
	string ActionContent = 4;

	// ObjectID example: 71
	int64 ObjectID = 5;

	// ObjectRepo example: "gorilla/mux"
	string ObjectRepo = 6;

	// ObjectType example: "branch"
	string ObjectType = 7;

	// ObjectTitle example: "mybranch"
	string ObjectTitle = 8;

	// ObjectURL example: "https://sourcegraph.com/sourcegraph/sourcegraph/-/branches/mybranch"
	string ObjectURL = 9;

	// SlackMsg, if present, will override the Slack message for this event.
	string SlackMsg = 10;

	// EmailHTML, if present, will override the notification email body for this event.
	string EmailHTML = 11;

	// NoEmail turns off the email notification for this event.
	bool NoEmail = 13;
}

// Notify service
service Notify {
	// GenericEvent will notify recipients of an event which happened
	rpc GenericEvent(NotifyGenericEvent) returns (pbtypes.Void);
}

// Annotations manages annotations on files.
service Annotations {
	// List lists matching annotations.
	rpc List(AnnotationsListOptions) returns (AnnotationList);
}

// An Annotation is metadata (such as a srclib ref) attached to a
// portion of a file.
message Annotation {
	// URL is the location where more information about the
	// annotation's topic may be found (e.g., for a srclib ref, it's
	// the def's URL).
	string URL = 1;

	// StartByte is the start of the byte range.
	uint32 StartByte = 2 [(gogoproto.jsontag) = "StartByte"];

	// EndByte is the end of the byte range.
	uint32 EndByte = 3 [(gogoproto.jsontag) = "EndByte"];

	// Class is the HTML class name that should be applied to this
	// region.
	string Class = 4;

	// Def is whether this annotation marks the definition of the
	// item described in URL or URLs. For example, "Foo" in "func Foo() {}"
	// would have its annotation with Def=true.
	//
	// Marking whether this annotation is a def lets us
	// jump-to-definition here from other refs in the same file
	// without needing to load the defs for those refs.
	bool Def = 7;

	// WantInner indicates that this annotation, when being applied to
	// the underlying text, should be inner (i.e., more deeply
	// nested). Larger numbers mean greater precedence for being
	// nested more deeply.
	int32 WantInner = 5;

	// URLs can be set instead of URL if there are multiple URLs on an
	// annotation.
	repeated string URLs = 6;
}

// AnnotationList is a list of annotations.
message AnnotationList {
	repeated Annotation Annotations = 1;
	repeated uint32 LineStartBytes = 2;
}

// AnnotationsListOptions specifies options for Annotations.List.
message AnnotationsListOptions {
	// Entry specifies the file in a specific repository at a specific
	// version.
	TreeEntrySpec Entry = 1 [(gogoproto.nullable) = false];

	// Range specifies the range within the file that annotations
	// should be fetched for. If it is not set, then all of the file's
	// annotations are returned.
	FileRange Range = 2;
}

// SearchOptions configures the scope of a global search.
message SearchOptions {
	// Repos is the list of repos to restrict the results to.
	// If empty, all repos are searched.
	repeated int32 Repos = 1 [(gogoproto.moretags) = "url:\",omitempty\""];

	// NotRepos is the list of repos from which to exclude results.
	// If empty, then no repositories are excluded.
	repeated int32 NotRepos = 2 [(gogoproto.moretags) = "url:\",omitempty\""];

	// Languages, if specified, limits the returned results to just the
	// specified languages.
	//
	// The values are case-insensitive, e.g. "java", "Java", and "jAvA" will
	// all match the Java programming language.
	repeated string Languages = 6;

	// NotLanguages, if specified, excludes the specified languages from the
	// returned results.
	//
	// The values are case-insensitive, e.g. "java", "Java", and "jAvA" will
	// all exclude the Java programming language.
	repeated string NotLanguages = 7;

	// Kinds, if specified, limits the returned results to just the specified
	// kinds of definitions (func, var, etc).
	repeated string Kinds = 8;

	// NotKinds, if specified, excludes the specified kinds of definitions
	// (func, var, etc) from the returned results.
	repeated string NotKinds = 9;

	// ListOptions specifies options for paginating
	// the result.
	ListOptions ListOptions = 3 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];

	// IncludeRepos indicates whether to include repository search results.
	bool IncludeRepos = 4;

	// PrefixMatch indicates whether to include defs prefix match on search results.
	bool PrefixMatch = 5;

	// Fast specifies that the client would like results returned more quickly at
	// the cost of missing lower ranked results. If there are no high-ranking results
	// and Fast is set to true, there may be no results returned at all.
	bool Fast = 10;

	// Latest indicates that the search should only search over the latest indexed revision of repositories.
	bool Latest = 11;
}

// SearchOp holds the options for global search for a given query.
message SearchOp {
	// Query is the text string being searched for.
	string Query = 1;

	// Opt controls the scope of the search.
	SearchOptions Opt = 2;
}

// RepoSearchResult holds a result of a global repo search.
message RepoSearchResult {
	// Repo represents a source code repository.
	Repo Repo = 1;
}

// DefSearchResult holds a result of a global def search.
message DefSearchResult {
	// Def is the def matching the search query.
	Def Def = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ""];

	// Score is the computed relevance of this result to the search query.
	float Score = 2;

	// RefCount is global ref count for this def.
	int32 RefCount = 3;
}

// SearchResultsList is a list of results to a global search.
message SearchResultsList {
	// RepoResults is the list of repo search results
	repeated RepoSearchResult RepoResults = 1;
	// DefResults is the list of def search results
	repeated DefSearchResult DefResults = 2;
	// SearchOptions is a list of options to a global search query.
	repeated SearchOptions SearchQueryOptions = 3;
}

// Search provides global search over all code indexed by Sourcegraph.
service Search {
	// Search returns a list of defs matching the given query string.
	rpc Search(SearchOp) returns (SearchResultsList);
}

// Channel manages a realtime communication channel between a client
// and the Sourcegraph server.
//
// Any client can start listening on any channel, and any client can
// send a message on any channel.
//
// It is currently used by editor plugins to cause the user's browser
// to navigate in sync with the token under the cursor in the user's
// editor.
service Channel {
	// Listen starts listening to a stream of actions for the given
	// channel.
	rpc Listen(ChannelListenOp) returns (stream ChannelAction);


	// Send sends an action to all listeners on the given channel.
	rpc Send(ChannelSendOp) returns (ChannelSendResult);
}

// ChannelListenOp is provided to a Channel.Listen call to initiate listening.
message ChannelListenOp {
	// Channel is the channel name to start listening for actions on.
	//
	// TODO(sqs): figure out how to separate channels, not rely on
	// clients to create strong/secure channel names, and prevent
	// guessing channels to snoop on other people's activity.
	string Channel = 1;
}

// A ChannelAction is an action sent to all listeners on a given channel.
message ChannelAction {
	// Error is the title of the error that is occuring client-side
	// Not used in latest version, since these errors shown editor side, potentially used in future
	string Error = 1;

	// Fix is the Fix for the Error occurring client-side
	// Not used in latest version, since these errors shown editor side, potentially used in future
	string Fix = 2;

	// Package is a the package of the token under the cursor
	string Package = 3;

	// Repo is the repo that the package belongs to
	string Repo = 4;

	// Def is the definition
	string Def = 5;

	// Status is the status code, 1 for successful lookup, 0 for editor doesn't recognize symbol
	int32 Status = 6 [(gogoproto.jsontag) = "Status"];

	// VersionMajor and VersionMinor are the plugin versions, i.e. 'Major:0' 'Minor:1' is 0.1
	int32 VersionMajor = 7 [(gogoproto.jsontag) = "VersionMajor"];
	int32 VersionMinor = 8 [(gogoproto.jsontag) = "VersionMinor"];

	// Editor type is the type of editor, i.e. 'sublime'
	string EditorType = 9;
}

// ChannelSendResult is provided to a Channel.Send call to send an action
// to all listeners on a given channel.
message ChannelSendOp {
	// Channel is the channel name whose listeners should receive this
	// action.
	string Channel = 1;

	// Action is the action to send.
	ChannelAction Action = 2 [(gogoproto.nullable) = false];

	// CheckForListeners is whether the Channel.Send call should wait to see
	// if there are any listeners on the channel.
	bool CheckForListeners = 3;
}

// ChannelSendResult describes the result of a Channel.Send call.
message ChannelSendResult {
	// No fields.
}
