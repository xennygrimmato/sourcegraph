#!/usr/bin/env node

var parser = require('nomnom');
var findpkgs = require('commonjs-findpkgs');
var npm = require('npm');
var path = require('path');
var child_process = require('child_process');
var fs = require('fs');
var findfiles = require('find-files-excluding-dirs');

var logger = require('../lib/logger.js');
var util = require('../lib/util.js');


parser.command("scan-commonjs")
    .callback(function() {
        // TODO(sqs): support ScanIgnore from repo Srcfile (pass to findpkgs ignore param)
    findpkgs(".", ["node_modules", "templates", "bower_components"], function(err, pkgs) {
        if (err) {
            logger.error("An error occurred while searching for packages", err);
            process.exit(1);
        }

        // omit package.json files that have syntax errors
        // filter out undesirable packages (packages whose paths contain
        // "node_modules", "templates", "bower_components".)
        // AC: I've deleted test from this list, there are some projects with such structure
        //probably other components can be deleted as well - TODO: check after full repo's test
        pkgs = pkgs.filter(function(pkg) {
            return !pkg.error;
        });

        if (!pkgs.length) {
            // no packages were found, let's scan for files
            var files = collectFiles(".", ["bower_components"]).map(function(f) {
                return util.normalizePath(path.relative(".", f));
            });

            console.log(JSON.stringify([{
                Name: ".",
                Type: "CommonJSPackage",
                Dir: ".",
                Files: files,
                Dependencies: [],
                Data: {}
            }], null, 2));
            return;
        }

        pkgs.forEach(function(pkg) {
            pkg.files = collectFiles(pkg.dir, ["bower_components", "node_modules"]);
        });

        // tracking package names to avoid duplicates
        var names = {};

        // convert from commonjs-findpkgs format to source unit
        var srcunits = pkgs.map(function(pkg) {
            // collect all deps
            var allDeps = [{
                name: "node",
                "version": ""
            }];

            function collectDeps(deps) {
                if (deps) Object.keys(deps).forEach(function(name) {
                    allDeps.push({
                        name: name,
                        version: deps[name]
                    });
                });
            }

            collectDeps(pkg.package.dependencies);
            collectDeps(pkg.package.devDependencies);

            files = arrayUnique(pkg.files.filter(function(f) {
                return fs.statSync(f).isFile();
            }).map(util.normalizePath));

            // ensure that source unit name is unique
            // first trying package's name, then package directory.
            // when package is marked private, using dir as a name
            var name = pkg.package.private ? pkg.dir : pkg.package.name || pkg.dir;
            if (names[name]) {
                name = pkg.dir;
            } else {
                names[name] = 1;
            }

                var data = pkg.package;
                data.Deps = allDeps;

                return {
                    Name: name,
                    Type: "CommonJSPackage",
                    Dir: util.normalizePath(pkg.dir),
                    Files: files,
                    Dependencies: allDeps.map(function(dep) {
                    	return {
                    		Name: dep.name,
                    		Type: "CommonJSPackage",
                    		Version: dep.version
                    	}
                    }),
                    Data: pkg.package
            }
        });

        console.log(JSON.stringify(srcunits, null, 2));
    });
})
.help("scan for CommonJS packages");

parser.command("depresolve")
    .callback(function() {
        var stdin = process.stdin,
            inputChunks = [];

        stdin.resume();
        stdin.setEncoding("utf8");

        stdin.on("data", function(chunk) {
            inputChunks.push(chunk);
        });

        stdin.on("end", function() {
            var inputJSON = inputChunks.join("");
            var commonJSPackage = JSON.parse(inputJSON);

            var deps = (commonJSPackage.Data || {}).Deps || [];
            var remaining = deps.length;
            var resolutions = [];

            if (remaining == 0) {
                console.log('[]');
                return;
            }

            deps.forEach(function(dep, i) {
                resolutions[i] = {
                    Raw: dep
                };
                var spec = dep.name + (dep.version ? "@" + dep.version : "");
                npm.load(function(err, npm) {
                    if (err) {
                        logger.error("An error occurred while loading NPM package", spec, err);
                        process.exit(1)
                    }

                    npm.commands.view([spec], true, function(err, data) {
                        if (hardcodedRepoURLs[spec]) {
                            data = {
                                "": {}
                            };
                            err = null
                        }

                        if (err) {
                            resolutions[i].Error = "error occurred while resolving '" + spec + "': " + JSON.stringify(err);
                        } else if (!data || Object.keys(data).length == 0) {
                            resolutions[i].Error = "no npm package found with spec " + spec;
                        } else {
                            // Choose a version at random if it spits back a lot (TODO(sqs):
                            // this is stupid, we want the version that `npm install` would
                            // install, not just any random version, especially when
                            // version=='*').
                            var chooseVersion = Object.keys(data)[0];
                            var info = data[chooseVersion];

                            var repoURL = "";
                            if (hardcodedRepoURLs[spec]) {
                                repoURL = hardcodedRepoURLs[spec];
                            } else if (info.repository) {
                                if (typeof info.repository == "string") repoURL = info.repository;
                                else repoURL = info.repository.url;
                            }

                            resolutions[i].Target = {
                                ToRepoCloneURL: repoURL,
                                ToUnit: info.name,
                                ToUnitType: "CommonJSPackage",
                                ToVersionString: info.version
                            };
                        }

                        remaining--;
                        if (remaining == 0) {
                            // done resolving all
                            console.log(JSON.stringify(resolutions, null, 2));
                        }
                    });
                });
            });
        });
    })
    .help("resolves dependencies of a CommonJS package");

var hardcodedRepoURLs = {
    "node": "https://github.com/joyent/node.git"
};

parser.command("graph")
    .option("noInstall", {
        flag: true,
        full: "no-install",
        help: "Disables installation of npm packages"
    })
    .callback(function(opts) {
        var stdin = process.stdin,
            inputChunks = [];

        stdin.resume();
        stdin.setEncoding("utf8");

        stdin.on("data", function(chunk) {
            inputChunks.push(chunk);
        });

        stdin.on("end", function() {
            var inputJSON = inputChunks.join("");
            var commonJSPackage = JSON.parse(inputJSON);

            function graph() {
                if (commonJSPackage.Files.length == 0) {
                    console.log("{}");
                    process.exit(0);
                }
                var dir = ".";
                var args = ["--max-old-space-size=8192"];
                args.push(path.join(__dirname, "../lib/analysis"));

                commonJSPackage.Files.forEach(function(f) {
                    args.push(path.join(dir, f));
                });

                child_process.execFile("node", args, {
                    maxBuffer: 50000 * 1024 * 1024
                }, function(err, stdout, stderr) {
                    if (stderr) {
                        console.error(stderr);
                    }
                    if (err) {
                        logger.error("An error occurred while indexing", commonJSPackage.Name, err);
                        return;
                    }

                    console.log(stdout);
                });
            }

            if (opts.noInstall) {
                graph();
                return;
            }

            var npmCmd = null;
            if (process.platform == "win32") {
                npmCmd = "npm.cmd";
            } else {
                npmCmd = "npm";
            }
            logger.info("Installing packages for", commonJSPackage.Name, "..");
            child_process.execFile(npmCmd,
                ["install", "--no-optional"],
                {cwd: commonJSPackage.Dir},
                function (err, stdout, stderr) {
                    if (err) {
                        logger.warn("Error(s) occurred while installing packages for",
                            commonJSPackage.Name,
                            ". Exit code was", err.code);
                        logger.warn("Stdout output");
                        logger.warn(stdout);
                        logger.warn("Stderr output");
                        logger.warn(stderr);
                    } else {
                        logger.info("Packages are installed for", commonJSPackage.Name);
                    }
                    graph();
                });
        });
    })
    .help("graph a CommonJS package using tern");

parser.parse();

var arrayUnique = function(a) {
    return a.reduce(function(p, c) {
        if (p.indexOf(c) < 0) p.push(c);
        return p;
    }, []);
};

/**
 *
 * @param {string} dir directory to search in
 * @param {string[]} excludes list excludes
 * @return {string[]} list of files found
 */
function collectFiles(dir, excludes) {
    var files = findfiles(dir, {
        exclude: excludes,
        matcher: function(directory, name) {
            return /\.jsx?$/.test(name) && !/\.min\.jsx?$/.test(name);
        }
    }).map(function(f) {
        return util.normalizePath(f);
    });
    console.error(files.length);
    return files;
}
