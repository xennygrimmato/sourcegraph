#!/usr/bin/env node

var format = require('util').format;
var forceArray = require('force-array');
var argv = require('optimist').argv;
var path = require('path');
var glob = require('glob');
var collect = require('collect-stream');
var flatten = require('lodash.flatten');
var async = require('async');
var fs = require('fs');

var jsctags = require('../');

var dir = (function() {
  if (argv.dir) {
    return path.resolve(argv.dir);
  }

  if (argv.file) {
    return path.dirname(argv.file);
  }

  if (argv._.length) {
    return path.dirname(argv._[0]);
  }

  return '///null';
})();

var file = (function() {
  if (argv.file) {
    return path.resolve(process.cwd(), argv.file);
  }

  if (!argv._.length && !argv.find) {
    return format('///null/%s', Math.floor(Math.random() * 100));
  }

  var find = forceArray(argv.find);
  var files = !find.length ? argv._ : find.reduce(function(files, pattern) {
    return files.concat(glob.sync(pattern, {
      nosort: true,
      silent: true
    }));
  }, []);

  return files.map(function(file) {
    return path.resolve(process.cwd(), file);
  });
})();

var outputTags = function(tags) {
  var ctags = flatten(jsctags.ctags(tags));
  console.log(ctags.join(''));
};

var outputJSON = function(tags) {
  console.log(JSON.stringify(flatten(forceArray(tags)), null, 2));
};

var onResults = function(err, results) {
  if (err) {
    throw err;
  }

  var fn = argv.f ? outputTags : outputJSON;

  var tags = results.filter(function(res) {
    if (res instanceof Error) {
      console.error(err);
      return false
    }

    return true;
  });

  tags.tagfile = results.tagfile;

  fn(tags);
};

var parse = function(ctx, fn) {
  jsctags(ctx, function(err, tags) {
    if (err) {
      return fn(err);
    }

    tags.tagfile = ctx.file;
    tags.forEach(function(tag) {
      tag.tagfile = ctx.file;
    });

    fn(err, tags);
  });
};

var fromStdin = function() {
  collect(process.stdin, function(err, content) {
    if (err) {
      throw err;
    }

    if (Buffer.isBuffer(content)) {
      content = content.toString();
    }

    parse({
      file: file,
      dir: dir,
      content: content
    }, onResults);
  });
};

var fromFiles = function() {
  var files = Array.isArray(file) ? file : [file];
  async.map(files, function(file, fn) {
    fs.readFile(file, 'utf8', function(err, content) {
      if (err) {
        return fn(null, err);
      }

      parse({
        file: file,
        dir: dir,
        content: content
      }, fn);
    });
  }, onResults);
};

(!argv._.length && !argv.find ? fromStdin : fromFiles)();